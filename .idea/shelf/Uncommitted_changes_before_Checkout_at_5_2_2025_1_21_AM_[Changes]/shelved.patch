Index: gradleSetup/src/main/java/model/Enums/commands/LoginMenuCommands.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.Enums.MenusRegexes;\r\n\r\nimport model.Enums.commands.Commands;\r\nimport view.AppMenu;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic enum LoginMenuCommands implements Commands {\r\n    exit(\"menu exit\"),\r\n    ShowCurrentMenu(\"show current menu\"),\r\n    register(\"register.+-u\\\\s+(.+)\\\\s+-p\\\\s+(.+)\\\\s+(.+)\\\\s+-n\\\\s+(.+)\\\\s+-e\\\\s+(.+)\\\\s+-g\\\\s+(.+)\"),\r\n    pickSecurityQuestion(\"pick\\\\s+question\\\\s+-q\\\\s+(.+)\\\\s+-a\\\\s+(.+)\\\\s+-c\\\\s+(.+)\"),\r\n    goMenu(\"menu Enter (.+)\"),\r\n    login(\"login -u (.+) -p (.+)\"),\r\n    loginWithStayLoggedOut(\"login\\\\s+-u\\\\s+(.+)\\\\s+-p\\\\s+(.+)\\\\s+–stay-logged-in\"),\r\n    forgetPassword(\"forget\\\\s+password\\\\s+-u\\\\s+(.+)\"),\r\n    answerSecurityQuestion(\"answer\\\\s+-a\\\\s+(.+)\");\r\n\r\n    private final String regex;\r\n    LoginMenuCommands(String regex) {\r\n        this.regex = regex;\r\n    }\r\n\r\n    public Matcher getMatcher(String input) {\r\n        Pattern compiledPattern = java.util.regex.Pattern.compile(this.regex);\r\n        return compiledPattern.matcher(input);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Enums/commands/LoginMenuCommands.java b/gradleSetup/src/main/java/model/Enums/commands/LoginMenuCommands.java
--- a/gradleSetup/src/main/java/model/Enums/commands/LoginMenuCommands.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/Enums/commands/LoginMenuCommands.java	(date 1746136283314)
@@ -1,4 +1,4 @@
-package model.Enums.MenusRegexes;
+package model.Enums.commands;
 
 import model.Enums.commands.Commands;
 import view.AppMenu;
@@ -7,13 +7,14 @@
 import java.util.regex.Pattern;
 
 public enum LoginMenuCommands implements Commands {
-    exit("menu exit"),
+    back("back"),
+    exit("exit"),
     ShowCurrentMenu("show current menu"),
     register("register.+-u\\s+(.+)\\s+-p\\s+(.+)\\s+(.+)\\s+-n\\s+(.+)\\s+-e\\s+(.+)\\s+-g\\s+(.+)"),
     pickSecurityQuestion("pick\\s+question\\s+-q\\s+(.+)\\s+-a\\s+(.+)\\s+-c\\s+(.+)"),
-    goMenu("menu Enter (.+)"),
+    goMenu("menu enter (.+)"),
     login("login -u (.+) -p (.+)"),
-    loginWithStayLoggedOut("login\\s+-u\\s+(.+)\\s+-p\\s+(.+)\\s+–stay-logged-in"),
+    loginWithStayLoggedin("login\\s+-u\\s+(.+)\\s+-p\\s+(\\S+) –stay-logged-in"),
     forgetPassword("forget\\s+password\\s+-u\\s+(.+)"),
     answerSecurityQuestion("answer\\s+-a\\s+(.+)");
 
Index: gradleSetup/src/main/java/view/LoginMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport com.google.gson.Gson;\r\nimport controller.MenuController.LoginMenuController;\r\nimport model.App;\r\nimport model.Enums.Menu;\r\nimport model.User;\r\nimport model.Enums.MenusRegexes.LoginMenuCommands;\r\n\r\nimport java.io.*;\r\nimport java.util.Scanner;\r\nimport java.util.regex.Matcher;\r\n\r\npublic class LoginMenu implements AppMenu {\r\n    private static final String FILE_PATH_FOR_STAY_LOGGED = \"StayLoggedIn.json\";\r\n\r\n    @Override\r\n    public void check(Scanner scanner) {\r\n        String input = scanner.nextLine();\r\n        Matcher matcher;\r\n        User tmpUser = null;\r\n        Gson gson = new Gson();\r\n        try (Reader reader = new FileReader(FILE_PATH_FOR_STAY_LOGGED);) {\r\n            tmpUser = gson.fromJson(reader, User.class);\r\n            App.setCurrentUser(tmpUser);\r\n            if(!App.getCurrentUser().equals(tmpUser)) {\r\n                System.out.println(\"hello \" + tmpUser.getUsername());\r\n            }\r\n        } catch (FileNotFoundException e) {\r\n            App.setCurrentUser(null);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        if ((matcher = LoginMenuCommands.register.getMatcher(input)).find()) {\r\n            System.out.println(LoginMenuController.manageRegisterUser(matcher));\r\n            if (LoginMenuController.manageRegisterUser(matcher).isSuccess()) {\r\n                String input1 = scanner.nextLine();\r\n                Matcher matcher1;\r\n                if ((matcher1 = LoginMenuCommands.pickSecurityQuestion.getMatcher(input1)).find() && LoginMenuController.manageRegisterUser(matcher).isSuccess()) {\r\n                    System.out.println(LoginMenuController.peakSecurityQuestion(matcher1, matcher));\r\n                } else {\r\n                    System.out.println(\"ok you don't want it!\");\r\n                }\r\n            }\r\n        } else if ((matcher = LoginMenuCommands.goMenu.getMatcher(input)).find()) {\r\n            String menu = matcher.group(1);\r\n            System.out.println(LoginMenuController.goToMenu(menu));\r\n        } else if ((matcher = LoginMenuCommands.loginWithStayLoggedOut.getMatcher(input)).find()) {\r\n            System.out.println(LoginMenuController.manageLoginUser(matcher, true));\r\n        } else if ((matcher = LoginMenuCommands.login.getMatcher(input)).find()) {\r\n            System.out.println(LoginMenuController.manageLoginUser(matcher, false));\r\n        } else if ((matcher = LoginMenuCommands.forgetPassword.getMatcher(input)).find()) {\r\n            System.out.println(LoginMenuController.manageForgotPassword(matcher));\r\n            if (LoginMenuController.manageForgotPassword(matcher).isSuccess()) {\r\n                Matcher matcher1;\r\n                String input1 = scanner.nextLine();\r\n                if ((matcher1 = LoginMenuCommands.answerSecurityQuestion.getMatcher(input1)).find() && LoginMenuController.manageForgotPassword(matcher).isSuccess()) {\r\n                    System.out.println(LoginMenuController.answer(matcher, matcher1));\r\n                    String input2 = scanner.nextLine();\r\n                    System.out.println(LoginMenuController.manageAnswerForgotPassword(input2, matcher));\r\n                } else {\r\n                    System.out.println(\"ok you don't want it!\");\r\n                }\r\n            }\r\n\r\n        } else if ((input.equals(\"menu exit\"))) {\r\n            App.setCurrentMenu(Menu.exitMenu);\r\n            System.out.println(\"why do you want to exit? );  \");\r\n        } else if ((matcher = LoginMenuCommands.ShowCurrentMenu.getMatcher(input)).find()) {\r\n            System.out.println(\"you are in login menu now!\");\r\n        } else if ((matcher = LoginMenuCommands.back.getMatcher(input)).find()) {\r\n            System.out.println(\"you can't go back!\");\r\n        } else {\r\n            System.out.println(\"invalid command bro!..\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/view/LoginMenu.java b/gradleSetup/src/main/java/view/LoginMenu.java
--- a/gradleSetup/src/main/java/view/LoginMenu.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/view/LoginMenu.java	(date 1746136219502)
@@ -4,8 +4,9 @@
 import controller.MenuController.LoginMenuController;
 import model.App;
 import model.Enums.Menu;
+import model.Enums.commands.LoginMenuCommands;
 import model.User;
-import model.Enums.MenusRegexes.LoginMenuCommands;
+
 
 import java.io.*;
 import java.util.Scanner;
@@ -45,7 +46,7 @@
         } else if ((matcher = LoginMenuCommands.goMenu.getMatcher(input)).find()) {
             String menu = matcher.group(1);
             System.out.println(LoginMenuController.goToMenu(menu));
-        } else if ((matcher = LoginMenuCommands.loginWithStayLoggedOut.getMatcher(input)).find()) {
+        } else if ((matcher = LoginMenuCommands.loginWithStayLoggedin.getMatcher(input)).find()) {
             System.out.println(LoginMenuController.manageLoginUser(matcher, true));
         } else if ((matcher = LoginMenuCommands.login.getMatcher(input)).find()) {
             System.out.println(LoginMenuController.manageLoginUser(matcher, false));
Index: gradleSetup/src/main/java/model/Enums/commands/GameCommands/CookingCommand.java
===================================================================
diff --git a/gradleSetup/src/main/java/model/Enums/commands/GameCommands/CookingCommand.java b/gradleSetup/src/main/java/model/Enums/commands/GameCommands/CookingCommand.java
deleted file mode 100644
--- a/gradleSetup/src/main/java/model/Enums/commands/GameCommands/CookingCommand.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ /dev/null	(revision 80348e89401892ac623a8409ba910183fada6c06)
@@ -1,26 +0,0 @@
-package model.Enums.commands.GameCommands;
-
-import model.Enums.commands.Commands;
-
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-public enum CookingCommand implements Commands {
-    cookingRefrigerator(""),
-    showRecipes(""),
-    cookingPrepare("");
-
-    private final String command;
-    CookingCommand(String command) {
-        this.command = command;
-    }
-
-    @Override
-    public Matcher getMatcher(String input) {
-        Matcher matcher = Pattern.compile(command).matcher(input);
-        if (matcher.find()) {
-            return matcher;
-        }
-        return null;
-    }
-}
Index: gradleSetup/src/main/java/model/Enums/commands/GameCommands/GameCommands.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.Enums.commands.GameCommands;\r\n\r\nimport model.Enums.commands.Commands;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic enum GameCommands implements Commands {\r\n\r\n    //Execute Commands\r\n    exitGame(\"\"),\r\n    nextTurn(\"\"),\r\n    buildGreenHouse(\"\")\r\n    ;\r\n\r\n    private final String pattern;\r\n\r\n    GameCommands(String pattern) {\r\n        this.pattern = pattern;\r\n    }\r\n\r\n    public boolean isValid(String input) {\r\n        return java.util.regex.Pattern.matches(this.pattern, input);\r\n    }\r\n\r\n    public Matcher getMatcher(String input) {\r\n        Pattern compiledPattern = java.util.regex.Pattern.compile(this.pattern);\r\n        return compiledPattern.matcher(input);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Enums/commands/GameCommands/GameCommands.java b/gradleSetup/src/main/java/model/Enums/commands/GameCommands/GameCommands.java
--- a/gradleSetup/src/main/java/model/Enums/commands/GameCommands/GameCommands.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/Enums/commands/GameCommands/GameCommands.java	(date 1746136122675)
@@ -8,8 +8,8 @@
 public enum GameCommands implements Commands {
 
     //Execute Commands
-    exitGame(""),
-    nextTurn(""),
+    exitGame("\\s*exit\\s+\\s*"),//TODO think about the algorithms
+    nextTurn("\\s*next\\s+turn\\s*"),
     buildGreenHouse("")
     ;
 
Index: gradleSetup/src/main/java/model/Enums/commands/GameCommands/WeatherCommands.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.Enums.commands.GameCommands;\r\n\r\nimport model.Enums.commands.Commands;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic enum WeatherCommands implements Commands {\r\n    //show commands\r\n    showTime(\"\"),\r\n    showDate(\"\"),\r\n    showDateTime(\"\"),\r\n    showDayOfWeek(\"\"),\r\n    showSeason(\"\"),\r\n    //cheat\r\n    cheatThor(\"\"),\r\n    cheatAdvancedDate(\"\"),\r\n    cheatAdvancedTime(\"\"),\r\n    cheatWeather(\"\");\r\n\r\n    private final String regex;\r\n\r\n    WeatherCommands(String regex) {\r\n        this.regex = regex;\r\n    }\r\n\r\n    @Override\r\n    public Matcher getMatcher(String input) {\r\n        Matcher matcher = Pattern.compile(regex).matcher(input);\r\n        if (matcher.matches()) {\r\n            return matcher;\r\n        }\r\n        return null;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Enums/commands/GameCommands/WeatherCommands.java b/gradleSetup/src/main/java/model/Enums/commands/GameCommands/WeatherCommands.java
--- a/gradleSetup/src/main/java/model/Enums/commands/GameCommands/WeatherCommands.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/Enums/commands/GameCommands/WeatherCommands.java	(date 1746136122677)
@@ -7,16 +7,11 @@
 
 public enum WeatherCommands implements Commands {
     //show commands
-    showTime(""),
-    showDate(""),
-    showDateTime(""),
-    showDayOfWeek(""),
-    showSeason(""),
+    showTodayWeather("\\s*weather\\s*"),
+    showTomorrowWeather("\\s*weather\\s+forecast\\s*"),
     //cheat
-    cheatThor(""),
-    cheatAdvancedDate(""),
-    cheatAdvancedTime(""),
-    cheatWeather("");
+    cheatThor("\\s*cheat\\s+Thor\\s+-l\\s+([0-9]+)\\s+([0-9]+)\\s*"),
+    cheatWeather("\\s*cheat\\s+weather\\s+set\\s+<Type>\\s*");
 
     private final String regex;
 
@@ -32,5 +27,4 @@
         }
         return null;
     }
-
 }
Index: gradleSetup/src/main/java/model/Enums/commands/GameCommands/TimeAndDateCommands.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.Enums.commands.GameCommands;\r\n\r\nimport model.Enums.commands.Commands;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic enum TimeAndDateCommands implements Commands {\r\n    showTime(\"\"),\r\n    showDate(\"\"),\r\n    showDateTime(\"\"),\r\n    showDayOfWeek(\"\"),\r\n    showSeason(\"\");\r\n\r\n    private final String regex;\r\n\r\n    TimeAndDateCommands(String regex) {\r\n        this.regex = regex;\r\n    }\r\n\r\n    @Override\r\n    public Matcher getMatcher(String input) {\r\n        Matcher matcher = Pattern.compile(regex).matcher(input);\r\n        if (matcher.matches()) {\r\n            return matcher;\r\n        }\r\n        return null;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Enums/commands/GameCommands/TimeAndDateCommands.java b/gradleSetup/src/main/java/model/Enums/commands/GameCommands/TimeAndDateCommands.java
--- a/gradleSetup/src/main/java/model/Enums/commands/GameCommands/TimeAndDateCommands.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/Enums/commands/GameCommands/TimeAndDateCommands.java	(date 1746136122676)
@@ -1,16 +1,17 @@
 package model.Enums.commands.GameCommands;
-
 import model.Enums.commands.Commands;
-
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 public enum TimeAndDateCommands implements Commands {
-    showTime(""),
-    showDate(""),
-    showDateTime(""),
-    showDayOfWeek(""),
-    showSeason("");
+    showTime("\\s*time\\s*"),
+    showDate("\\*date\\s*"),
+    showDateTime("\\s*date\\s+time\\s*"),
+    showDayOfWeek("\\s*day\\s+of\\s+the\\s+week\\s*"),
+    showSeason("\\s*season\\s*"),
+    cheatAdvancedDate("\\s*cheat\\s+advance\\s+date\\s+([0-9]+))d\\s+"),
+    cheatAdvancedTime("\\s*cheat\\s+advance\\s+time\\s+([0-9]+))h\\s+"),
+    ;
 
     private final String regex;
 
Index: gradleSetup/src/main/java/test/LoginAndSignUpTestCase
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>show current menu(\"show
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/test/LoginAndSignUpTestCase b/gradleSetup/src/main/java/test/LoginAndSignUpTestCase
--- a/gradleSetup/src/main/java/test/LoginAndSignUpTestCase	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/test/LoginAndSignUpTestCase	(date 1746136122685)
@@ -1,1 +1,40 @@
-show current menu("show
\ No newline at end of file
+show current menu
+menu enter main menu
+back
+register -u Mohsen? -p MohsenZare12? MohsenZare12? -n Ali -e Mohsen33@gmail.com -g male  //name is incorrect
+register -u Mohsen -p MohsenZare12` MohsenZare12? -n Ali -e Mohsen33@gmail.com -g male //password use not supported character
+register -u Mohsen -p MohsenZare12? MohsenZare12 -n Ali -e Mohsen33@gmail.com -g male //password and confirm password is not equal
+register -u Mohsen -p Mohsen Mohsen -n Ali -e Mohsen33@gmail.com -g male //password is too short
+register -u Mohsen -p MohsenZare12 MohsenZare12 -n Ali -e Mohsen33@gmail.com -g male //password is not strong
+register -u Mohsen -p MohsenZare12? MohsenZare12? -n Ali -e john..doe@example.com -g male //two dot back together
+register -u Mohsen -p MohsenZare12? MohsenZare12? -n Ali -e user@domain -g male //don't have domain
+register -u Mohsen -p MohsenZare12? MohsenZare12? -n Ali -e user@domain.c -g male //domain would not have 1 character
+register -u Mohsen -p MohsenZare12? MohsenZare12? -n Ali -e user@domain..com -g male //two dot in domain
+register -u Mohsen -p MohsenZare12? MohsenZare12? -n Ali -e user@.com -g male //domain start with dot
+register -u Mohsen -p MohsenZare12? MohsenZare12? -n Ali -e mohsenAli23@gmail.com -g male
+pick question -q 1 -a blue -c blue
+register -u Mohsen -p MohsenZare12? MohsenZare12? -n Ali -e mohsenAli23@gmail.com -g male //another Mohsen have registered
+login -u Mohsen -p MohsenZare12? –stay-logged-in
+menu exit
+forget password -u Mohsen
+answer -a blue
+menu enter main menu
+user logout
+menu enter main menu
+login -u Mohsen -p MohsenZare12?
+menu enter profile menu
+change username -u mohsen` //check like login menu
+change username -u mohsen
+change username -u mohsenZare
+change nickname -u mohsen
+change email -e user@domain
+change email -e user@domain.c
+change email -e user@domain..com
+change email -e user@.com
+change email -e Mohsenzare123@gmail.com
+change password -p MohsenZare12? -o MohsenZare12?
+change password -p MohsenZare12? -o MohsenZare12
+change password -p MohsenZare12 -o MohsenZare12?
+change password -p Mohsen -o MohsenZare12?
+change password -p Mohsenzare` -o MohsenZare12?
+user info
\ No newline at end of file
Index: gradleSetup/src/main/java/model/items/Item.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.items;\r\n\r\npublic abstract class Item {\r\n    protected boolean Stackable;\r\n    protected int maxStackSize;\r\n\r\n    protected String name;\r\n\r\n    public Item(String name, int maxStackSize, boolean Stackable) {\r\n        this.name = name;\r\n        this.maxStackSize = maxStackSize;\r\n        this.Stackable = Stackable;\r\n    }\r\n\r\n    public void deleteItem() {\r\n    }\r\n\r\n    public void dropItem() {\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/items/Item.java b/gradleSetup/src/main/java/model/items/Item.java
--- a/gradleSetup/src/main/java/model/items/Item.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/items/Item.java	(date 1746136122682)
@@ -3,7 +3,6 @@
 public abstract class Item {
     protected boolean Stackable;
     protected int maxStackSize;
-
     protected String name;
 
     public Item(String name, int maxStackSize, boolean Stackable) {
@@ -17,4 +16,12 @@
 
     public void dropItem() {
     }
+
+    public String getName() {
+        return name;
+    }
+    public int getMaxStackSize() {
+        return maxStackSize;
+    }
+
 }
Index: gradleSetup/src/main/java/model/items/Food.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.items;\r\n\r\nimport java.util.HashMap;\r\n\r\npublic class Food extends Item {\r\n    private String name;\r\n    private int energy;\r\n    private int price;\r\n\r\n    public Food(String name, int maxStackSize,HashMap<Item, Integer> ingredients,int energy, int price) {\r\n        super(name,maxStackSize,true);\r\n        this.name = name;\r\n        this.energy = energy;\r\n        this.price = price;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getEnergy() {\r\n        return energy;\r\n    }\r\n\r\n    public int getPrice() {\r\n        return price;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/items/Food.java b/gradleSetup/src/main/java/model/items/Food.java
--- a/gradleSetup/src/main/java/model/items/Food.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/items/Food.java	(date 1746136122682)
@@ -6,12 +6,14 @@
     private String name;
     private int energy;
     private int price;
+    private String buff;
 
-    public Food(String name, int maxStackSize,HashMap<Item, Integer> ingredients,int energy, int price) {
+    public Food(String name, int maxStackSize,int energy, int price, String buff) {
         super(name,maxStackSize,true);
         this.name = name;
         this.energy = energy;
         this.price = price;
+        this.buff = buff;
     }
 
     public String getName() {
@@ -25,4 +27,12 @@
     public int getPrice() {
         return price;
     }
+
+    public String getBuff() {
+        return buff;
+    }
+
+    public void setBuff(String buff) {
+        this.buff = buff;
+    }
 }
Index: gradleSetup/src/main/java/model/items/Inventory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.items;\r\n\r\nimport java.util.HashMap;\r\n\r\npublic class Inventory {\r\n    private final HashMap<Item,Integer> itemList = new HashMap<>();\r\n    private int capacity;\r\n    public Inventory(int capacity) {\r\n        this.capacity = capacity;\r\n    }\r\n\r\n    public HashMap<Item,Integer> getItemList() {\r\n        return itemList;\r\n    }\r\n\r\n    public void updateCapacity(int capacity) {\r\n        this.capacity = capacity;\r\n    }\r\n\r\n    public void add(Item item) {\r\n        //TODO\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/items/Inventory.java b/gradleSetup/src/main/java/model/items/Inventory.java
--- a/gradleSetup/src/main/java/model/items/Inventory.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/items/Inventory.java	(date 1746136122682)
@@ -1,23 +1,84 @@
 package model.items;
 
+import model.Slot;
+
+import java.util.ArrayList;
 import java.util.HashMap;
 
 public class Inventory {
-    private final HashMap<Item,Integer> itemList = new HashMap<>();
+    private ArrayList<Slot> slots;
     private int capacity;
+
     public Inventory(int capacity) {
         this.capacity = capacity;
     }
 
-    public HashMap<Item,Integer> getItemList() {
-        return itemList;
-    }
 
     public void updateCapacity(int capacity) {
         this.capacity = capacity;
     }
 
-    public void add(Item item) {
-        //TODO
-    }
+    public void add(Item item, int quantity) {
+        for (Slot slot : slots) {
+            if (slot.getItem().equals(item)) {
+                if (slot.getQuantity() + quantity < item.getMaxStackSize())
+                    slot.setQuantity(slot.getQuantity() + quantity);
+                else if (slot.getQuantity() + quantity > item.getMaxStackSize()) {
+                    int tmpQuantity = quantity;
+
+                    int spaceLeft = item.getMaxStackSize() - slot.getQuantity();
+                    slot.setQuantity(item.getMaxStackSize());
+                    tmpQuantity -= spaceLeft;
+
+                    while (tmpQuantity > 0) {
+                        if (slots.size() == capacity) {
+                            return;
+                        }
+
+                        int addAmount = Math.min(tmpQuantity, item.getMaxStackSize());
+                        Slot newSlot = new Slot(item, addAmount);
+                        slots.add(newSlot);
+                        tmpQuantity -= addAmount;
+                    }
+                    return;
+                } else {
+                    slot.setQuantity(slot.getQuantity() + quantity);
+                }
+            } else {
+                int tmpQuantity = quantity;
+                while (tmpQuantity > 0) {
+                    if (slots.size() == capacity) {
+                        return;
+                    }
+                    int addAmount = Math.min(tmpQuantity, item.getMaxStackSize());
+                    Slot newSlot = new Slot(item, addAmount);
+                    slots.add(newSlot);
+                    tmpQuantity -= addAmount;
+                }
+            }
+        }
+    }
+
+    public void remove(Item item, int quantity) {
+        int tmpQuantity = quantity;
+        for (Slot slot : slots) {
+            if (slot.getItem().equals(item)) {
+                if(slot.getQuantity() >= tmpQuantity) {
+                    slot.setQuantity(slot.getQuantity() - tmpQuantity);
+                    if(slot.getQuantity()==0){
+                        slots.remove(slot);
+                    }
+                    return;
+                } else if(slot.getQuantity() < tmpQuantity) {
+                   tmpQuantity -= slot.getQuantity();
+                   slots.remove(slot);
+                }
+            }
+        }
+    }
+    public ArrayList<Slot> getSlots(){
+        return slots;
+    }
+
+
 }
\ No newline at end of file
Index: gradleSetup/src/main/java/model/Enums/commands/MainMenuCommands.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.Enums.commands;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic enum MainMenuCommands implements Commands {\r\n    ShowCurrentMenu(\"show current menu\"),\r\n    goMenu(\"menu Enter (.+)\"),\r\n    logout(\"user logout\");\r\n\r\n    private final String regex;\r\n\r\n    MainMenuCommands(String regex) {\r\n        this.regex = regex;\r\n    }\r\n    @Override\r\n    public Matcher getMatcher(String input) {\r\n        Pattern compiledPattern = Pattern.compile(this.regex);\r\n        return compiledPattern.matcher(input);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Enums/commands/MainMenuCommands.java b/gradleSetup/src/main/java/model/Enums/commands/MainMenuCommands.java
--- a/gradleSetup/src/main/java/model/Enums/commands/MainMenuCommands.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/Enums/commands/MainMenuCommands.java	(date 1746136122677)
@@ -4,8 +4,9 @@
 import java.util.regex.Pattern;
 
 public enum MainMenuCommands implements Commands {
+    back("back"),
     ShowCurrentMenu("show current menu"),
-    goMenu("menu Enter (.+)"),
+    goMenu("menu enter (.+)"),
     logout("user logout");
 
     private final String regex;
Index: gradleSetup/src/main/java/model/Enums/commands/ProfileMenuCommands.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.Enums.commands;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic enum ProfileMenuCommands implements Commands {\r\n    changeUserName(\"\\\\s*change\\\\s+username\\\\s+-u\\\\s+(?<username>.+)\\\\s*\"),\r\n    changeNickName(\"\\\\s*change\\\\s+nickname\\\\s+-u\\\\s+(?<name>.+)\\\\s*\"),\r\n    changeEmail(\"\\\\s*change\\\\s+email\\\\s+-e\\\\s+<email>.+)\\\\s*\"),\r\n    changePassword(\"\\\\s*change password\\\\s*-p\\\\s+(?<newPassword>.+)\\\\s+-o\\\\s+(?<old_password>.+)\\\\s*\"),\r\n    showUserInformation(\"\\\\s*user\\\\s+info\\\\s*\"),\r\n    ShowCurrentMenu(\"\\\\s*show\\\\s+current\\\\s+menu\\\\s*\"),\r\n    BackToMainMenu(\"\\\\s*back\\\\s*\");\r\n\r\n    private final String regex;\r\n\r\n    ProfileMenuCommands(String regex) {\r\n        this.regex = regex;\r\n    }\r\n\r\n    @Override\r\n    public Matcher getMatcher(String input) {\r\n        Matcher matcher = Pattern.compile(regex).matcher(input);\r\n        if (matcher.matches()) {\r\n            return matcher;\r\n        }\r\n        return null;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Enums/commands/ProfileMenuCommands.java b/gradleSetup/src/main/java/model/Enums/commands/ProfileMenuCommands.java
--- a/gradleSetup/src/main/java/model/Enums/commands/ProfileMenuCommands.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/Enums/commands/ProfileMenuCommands.java	(date 1746136122678)
@@ -4,13 +4,13 @@
 import java.util.regex.Pattern;
 
 public enum ProfileMenuCommands implements Commands {
-    changeUserName("\\s*change\\s+username\\s+-u\\s+(?<username>.+)\\s*"),
-    changeNickName("\\s*change\\s+nickname\\s+-u\\s+(?<name>.+)\\s*"),
-    changeEmail("\\s*change\\s+email\\s+-e\\s+<email>.+)\\s*"),
-    changePassword("\\s*change password\\s*-p\\s+(?<newPassword>.+)\\s+-o\\s+(?<old_password>.+)\\s*"),
+    changeUserName("\\s*change\\s+username\\s+-u\\s+(.+)\\s*"),
+    changeNickName("\\s*change\\s+nickname\\s+-u\\s+(.+)\\s*"),
+    changeEmail("\\s*change\\s+email\\s+-e\\s+(.+)\\s*"),
+    changePassword("\\s*change\\s+password\\s+-p\\s+(.+)\\s+-o\\s+(.+)\\s*"),
     showUserInformation("\\s*user\\s+info\\s*"),
     ShowCurrentMenu("\\s*show\\s+current\\s+menu\\s*"),
-    BackToMainMenu("\\s*back\\s*");
+    Back("\\s*back\\s*");
 
     private final String regex;
 
Index: gradleSetup/src/main/java/model/skills/FarmingSkill.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.skills;\r\n\r\npublic class FarmingSkill extends Skill {\r\n    @Override\r\n    public int calculateLevel() {\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/skills/FarmingSkill.java b/gradleSetup/src/main/java/model/skills/FarmingSkill.java
--- a/gradleSetup/src/main/java/model/skills/FarmingSkill.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/skills/FarmingSkill.java	(date 1746136122683)
@@ -1,8 +1,13 @@
 package model.skills;
 
 public class FarmingSkill extends Skill {
+    public FarmingSkill(int xp) {
+        super(xp);
+    }
+
     @Override
     public int calculateLevel() {
         return 0;
+        //TODO complete this
     }
 }
Index: gradleSetup/src/main/java/model/skills/ForagingSkill.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.skills;\r\n\r\npublic class ForagingSkill extends Skill {\r\n    @Override\r\n    public int calculateLevel() {\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/skills/ForagingSkill.java b/gradleSetup/src/main/java/model/skills/ForagingSkill.java
--- a/gradleSetup/src/main/java/model/skills/ForagingSkill.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/skills/ForagingSkill.java	(date 1746136122683)
@@ -1,6 +1,10 @@
 package model.skills;
 
 public class ForagingSkill extends Skill {
+    public ForagingSkill(int xp) {
+        super(xp);
+    }
+
     @Override
     public int calculateLevel() {
         return 0;
Index: gradleSetup/src/main/java/model/skills/FishingSkill.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.skills;\r\n\r\npublic class FishingSkill extends Skill {\r\n    @Override\r\n    public int calculateLevel() {\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/skills/FishingSkill.java b/gradleSetup/src/main/java/model/skills/FishingSkill.java
--- a/gradleSetup/src/main/java/model/skills/FishingSkill.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/skills/FishingSkill.java	(date 1746136122683)
@@ -1,6 +1,10 @@
 package model.skills;
 
 public class FishingSkill extends Skill {
+    public FishingSkill(int xp) {
+        super(xp);
+    }
+
     @Override
     public int calculateLevel() {
         return 0;
Index: gradleSetup/src/main/java/model/skills/Skill.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.skills;\r\n\r\npublic abstract class Skill {\r\n    private int xp;\r\n\r\n    public abstract int calculateLevel();\r\n\r\n    public int getXp() {\r\n        return xp;\r\n    }\r\n\r\n    public void setXp(int xp) {\r\n        this.xp = xp;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/skills/Skill.java b/gradleSetup/src/main/java/model/skills/Skill.java
--- a/gradleSetup/src/main/java/model/skills/Skill.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/skills/Skill.java	(date 1746136122684)
@@ -3,6 +3,11 @@
 public abstract class Skill {
     private int xp;
 
+
+    public Skill(int xp) {
+        this.xp = xp;
+    }
+
     public abstract int calculateLevel();
 
     public int getXp() {
Index: gradleSetup/src/main/java/model/skills/MiningSkill.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.skills;\r\n\r\npublic class MiningSkill extends Skill {\r\n    @Override\r\n    public int calculateLevel() {\r\n        return 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/skills/MiningSkill.java b/gradleSetup/src/main/java/model/skills/MiningSkill.java
--- a/gradleSetup/src/main/java/model/skills/MiningSkill.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/skills/MiningSkill.java	(date 1746136122684)
@@ -1,6 +1,10 @@
 package model.skills;
 
 public class MiningSkill extends Skill {
+    public MiningSkill(int xp) {
+        super(xp);
+    }
+
     @Override
     public int calculateLevel() {
         return 0;
Index: gradleSetup/src/main/java/model/States/Energy.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.States;\r\n\r\npublic class Energy {\r\n\r\n    private int energy;\r\n\r\n    public Energy(int energy) {\r\n        this.energy = energy;\r\n    }\r\n\r\n    public int getEnergy() {\r\n        return energy;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/States/Energy.java b/gradleSetup/src/main/java/model/States/Energy.java
--- a/gradleSetup/src/main/java/model/States/Energy.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/States/Energy.java	(date 1746136122681)
@@ -11,4 +11,7 @@
     public int getEnergy() {
         return energy;
     }
+    public void setEnergy(int energy) {
+        this.energy = energy;
+    }
 }
Index: foods.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/foods.json b/foods.json
new file mode 100644
--- /dev/null	(date 1746136122663)
+++ b/foods.json	(date 1746136122663)
@@ -0,0 +1,188 @@
+{
+  "foods": [
+    {
+      "name": "Fried egg",
+      "ingridient": "1 egg",
+      "energy": 50,
+      "buff": "",
+      "source": "Starter",
+      "price": "35g"
+    },
+    {
+      "name": "Baked Fish",
+      "ingridient": "1 Sardine + 1 Salmon + 1 wheat",
+      "energy": 75,
+      "buff": "",
+      "source": "Starter",
+      "price": "100g"
+    },
+    {
+      "name": "Salad",
+      "ingridient": "1 leek + 1 dandelion",
+      "energy": 113,
+      "buff": "",
+      "source": "Starter",
+      "price": "110g"
+    },
+    {
+      "name": "Olmelet",
+      "ingridient": " 1 egg + 1 milk",
+      "energy": 100,
+      "buff": "",
+      "source": "Stardrop Saloon",
+      "price": "125g"
+    },
+    {
+      "name": "pumpkin pie",
+      "ingridient": "1 pumpking + 1 wheat flour + \r\n1 milk + 1 sugar",
+      "energy": 225,
+      "buff": "",
+      "source": "Stardrop Saloon",
+      "price": "385g"
+    },
+    {
+      "name": "spaghetti",
+      "ingridient": "1 wheat flour + 1 tomato",
+      "energy": 75,
+      "buff": "",
+      "source": "Stardrop Saloon",
+      "price": "120g"
+    },
+    {
+      "name": "pizza",
+      "ingridient": "1 wheat flour + 1 tomato + \r\n1 cheese",
+      "energy": 150,
+      "buff": "",
+      "source": "Stardrop Saloon",
+      "price": "300g"
+    },
+    {
+      "name": "Tortilla",
+      "ingridient": "1 corn",
+      "energy": 50,
+      "buff": "",
+      "source": "Stardrop Saloon",
+      "price": "50g"
+    },
+    {
+      "name": "Maki Roll",
+      "ingridient": "1 any fish + 1 rice + 1 fiber",
+      "energy": 100,
+      "buff": "",
+      "source": "Stardrop Saloon",
+      "price": "220g"
+    },
+    {
+      "name": "Triple Shot Espresso",
+      "ingridient": "3 coffee",
+      "energy": 200,
+      "buff": "Max energy + 100 (5 hours)",
+      "source": "Stardrop Saloon",
+      "price": "450g"
+    },
+    {
+      "name": "Cookie",
+      "ingridient": "1 wheat flour + 1 sugar + 1 egg",
+      "energy": 90,
+      "buff": "",
+      "source": "Stardrop Saloon",
+      "price": "140g"
+    },
+    {
+      "name": "hash browns",
+      "ingridient": "1 potato + 1 oil",
+      "energy": 90,
+      "buff": "Farming (5 hours)",
+      "source": "Stardrop Saloon",
+      "price": "120g"
+    },
+    {
+      "name": "pancakes",
+      "ingridient": "1 wheat flour + 1 egg",
+      "energy": 90,
+      "buff": "Foraging (11 hours)",
+      "source": "Stardrop Saloon",
+      "price": "80g"
+    },
+    {
+      "name": "fruit salad",
+      "ingridient": "1 blueberry + 1 melon + 1 apricot",
+      "energy": 263,
+      "buff": "",
+      "source": "Stardrop Saloon",
+      "price": "450g"
+    },
+    {
+      "name": "red plate",
+      "ingridient": "1 red cabbage + 1 radish ",
+      "energy": 240,
+      "buff": "max energy +50 (3 hours)",
+      "source": "Stardrop Saloon",
+      "price": "400g"
+    },
+    {
+      "name": "bread",
+      "ingridient": "1 wheat flour",
+      "energy": 50,
+      "buff": "",
+      "source": "Stardrop Saloon",
+      "price": "60g"
+    },
+    {
+      "name": "salmon dinner",
+      "ingridient": "1 salmon + 1 Amaranth + 1 Kale",
+      "energy": 125,
+      "buff": "",
+      "source": "Leah reward",
+      "price": "300g"
+    },
+    {
+      "name": "vegetable medley ",
+      "ingridient": "1 tomato + 1 beet",
+      "energy": 165,
+      "buff": "",
+      "source": "Foraging Level 2",
+      "price": "120g"
+    },
+    {
+      "name": "farmer's lunch",
+      "ingridient": "1 omelet + 1 parsnip",
+      "energy": 200,
+      "buff": "Farming (5 hours)",
+      "source": "Farming level 1",
+      "price": "150g"
+    },
+    {
+      "name": "survival burger",
+      "ingridient": "1 bread + 1 carrot + 1 eggplant",
+      "energy": 125,
+      "buff": "Foraging (5 hours)",
+      "source": "Foraging level 3",
+      "price": "180g"
+    },
+    {
+      "name": "dish O' the Sea",
+      "ingridient": "2 sardines + 1 hash browns",
+      "energy": 150,
+      "buff": "Fishing (5 hours)",
+      "source": "Fishing level 2",
+      "price": "220g"
+    },
+    {
+      "name": "seaform Pudding",
+      "ingridient": "1 Flounder + 1 midnight carp ",
+      "energy": 175,
+      "buff": "Fishing (10 hours)",
+      "source": "Fishing level 3",
+      "price": "300g"
+    },
+    {
+      "name": "miner's treat",
+      "ingridient": "2 carrot + 1 suger +. 1 milk",
+      "energy": 125,
+      "buff": "Mining (5 hours)",
+      "source": "Mining level 1",
+      "price": "200g"
+    }
+  ]
+}
\ No newline at end of file
Index: StayLoggedIn.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/StayLoggedIn.json b/StayLoggedIn.json
new file mode 100644
--- /dev/null	(date 1746136122663)
+++ b/StayLoggedIn.json	(date 1746136122663)
@@ -0,0 +1,1 @@
+{"username":"Mosen","name":"Ali","password":"b6d0001092f22ff86f6d71eda0304865e99b7f7f7a9429d701fab217d1d64af9","salt":"rAAK4cGapTI0PENpaYMbIQ\u003d\u003d","email":"mohsenAli23@gmail.com","securityQuestion":1,"answer":"blue","gender":true,"games":[],"numOfGames":0,"highScore":0}
\ No newline at end of file
Index: gradleSetup/src/main/java/model/Locations/Farm.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.Locations;\r\n\r\nimport model.TimeSystem.DateTime;\r\nimport model.TimeSystem.TimeObserver;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Farm implements TimeObserver {\r\n    private Tile[][] tiles;\r\n    private ArrayList<Building> buildings;\r\n\r\n\r\n\r\n    @Override\r\n    public void onHourChanged(DateTime time, boolean newDay) {\r\n        if(newDay) {\r\n            //TODO\r\n            System.out.println(\"good Morning\");\r\n        }\r\n        else {\r\n            System.out.println(\"Welcome to your turn\");\r\n            //TODO\r\n        }\r\n    }\r\n    //TODO\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Locations/Farm.java b/gradleSetup/src/main/java/model/Locations/Farm.java
--- a/gradleSetup/src/main/java/model/Locations/Farm.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/Locations/Farm.java	(date 1746136122679)
@@ -7,7 +7,7 @@
 
 public class Farm implements TimeObserver {
     private Tile[][] tiles;
-    private ArrayList<Building> buildings;
+    private Home myHome;
 
 
 
@@ -22,5 +22,13 @@
             //TODO
         }
     }
-    //TODO
+
+    public Home getMyHome() {
+        return myHome;
+    }
+
+    public void setMyHome(Home myHome) {
+        this.myHome = myHome;
+    }
+
 }
Index: gradleSetup/src/main/java/model/Enums/FarmPosition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Enums/FarmPosition.java b/gradleSetup/src/main/java/model/Enums/FarmPosition.java
new file mode 100644
--- /dev/null	(date 1746136122674)
+++ b/gradleSetup/src/main/java/model/Enums/FarmPosition.java	(date 1746136122674)
@@ -0,0 +1,10 @@
+package model.Enums;
+
+public enum FarmPosition {
+    UPRIGHT,
+    UPLEFT,
+    DOWNRIGHT,
+    DOWNLEFT,
+}
+
+
Index: gradleSetup/src/main/java/model/Enums/commands/GameCommands/PreGameMenuCommands.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Enums/commands/GameCommands/PreGameMenuCommands.java b/gradleSetup/src/main/java/model/Enums/commands/GameCommands/PreGameMenuCommands.java
new file mode 100644
--- /dev/null	(date 1746136122676)
+++ b/gradleSetup/src/main/java/model/Enums/commands/GameCommands/PreGameMenuCommands.java	(date 1746136122676)
@@ -0,0 +1,29 @@
+package model.Enums.commands.GameCommands;
+
+import model.Enums.commands.Commands;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public enum PreGameMenuCommands implements Commands {
+    newGameRegex("\\s*game\\s+new\\s+-u\\s*(.+)"),
+    chooseMap("\\s*game\\s+map\\s+(-?\\d+)\\s*"),
+    loadGame("\\s*load\\s+game\\s*")
+
+    ;
+
+    private final String regex;
+
+    PreGameMenuCommands(String regex) {
+        this.regex = regex;
+    }
+
+    @Override
+    public Matcher getMatcher(String input) {
+        Matcher matcher = Pattern.compile(regex).matcher(input);
+        if (matcher.matches()) {
+            return matcher;
+        }
+        return null;
+    }
+}
Index: users.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/users.json b/users.json
new file mode 100644
--- /dev/null	(date 1746136122688)
+++ b/users.json	(date 1746136122688)
@@ -0,0 +1,1 @@
+[{"username":"Mohsen","name":"Ali","password":"fc2e4d77fbb7b349f47b15514ccea1501f93944bf775113a4a7814edb4794b38","salt":"YAHwz5fNLT2E0Jcee6K6WA\u003d\u003d","email":"mohsenAli23@gmail.com","securityQuestion":1,"answer":"blue","gender":true,"games":[],"numOfGames":0,"highScore":0},{"username":"Mehdi","name":"Ali","password":"b4fb7940c9572ad3b31aefcdf18239fd428c62e20a3efc6bbc1513c23dded472","salt":"G9iN5T2Q5dApZWfE+qD07Q\u003d\u003d","email":"mohsenAli23@gmail.com","securityQuestion":1,"answer":"blue","gender":true,"games":[],"numOfGames":0,"highScore":0},{"username":"Mohs","name":"Ali","password":"7c31ad548a99f6beca335c7158d75718db1c2a38d23b3a1420bebde19192f31d","salt":"NYkDp9ykNOCeQPm8fCc2Kg\u003d\u003d","email":"mohsenAli23@gmail.com","securityQuestion":1,"answer":"blue","gender":true,"games":[],"numOfGames":0,"highScore":0},{"username":"Mohse","name":"Ali","password":"69e566aaece15631cfb20a6045648531dc30c123c041a6f0f13f804241cee89b","salt":"D7droCL1kAyzSdRgoDzwdg\u003d\u003d","email":"mohsenAli23@gmail.com","securityQuestion":1,"answer":"blue","gender":true,"games":[],"numOfGames":0,"highScore":0},{"username":"Mohsenn","name":"Ali","password":"55b9ea60c28d9c086f247827287a637baa901da73301ba41b0506082a9679d64","salt":"iRGtePWjefpPM6JkuM9lWA\u003d\u003d","email":"mohsenAli23@gmail.com","securityQuestion":1,"answer":"blue","gender":true,"games":[],"numOfGames":0,"highScore":0},{"username":"Mosen","name":"Ali","password":"b6d0001092f22ff86f6d71eda0304865e99b7f7f7a9429d701fab217d1d64af9","salt":"rAAK4cGapTI0PENpaYMbIQ\u003d\u003d","email":"mohsenAli23@gmail.com","securityQuestion":1,"answer":"blue","gender":true,"games":[],"numOfGames":0,"highScore":0}]
\ No newline at end of file
Index: gradleSetup/gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradleSetup/gradle.properties b/gradleSetup/gradle.properties
new file mode 100644
--- /dev/null	(date 1746136122670)
+++ b/gradleSetup/gradle.properties	(date 1746136122670)
@@ -0,0 +1,6 @@
+org.gradle.daemon=true
+org.gradle.caching=true
+org.gradle.parallel=true
+org.gradle.configureondemand=true
+org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
+org.gradle.vfs.watch=true
Index: gradleSetup/src/main/java/model/Locations/Home.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Locations/Home.java b/gradleSetup/src/main/java/model/Locations/Home.java
new file mode 100644
--- /dev/null	(date 1746136122679)
+++ b/gradleSetup/src/main/java/model/Locations/Home.java	(date 1746136122679)
@@ -0,0 +1,26 @@
+package model.Locations;
+
+import model.GameObject.Refrigerator;
+import model.items.Item;
+
+public class Home extends Building {
+    private Refrigerator myRefrigerator;
+
+    public Home(String name, Position position, int width, int height, int insideWidth, int insideHeight, boolean[][] walkable, Refrigerator myRefrigerator) {
+        super(name, position, width, height, insideWidth, insideHeight, walkable);
+        this.myRefrigerator = myRefrigerator;
+    }
+
+    @Override
+    public void interact() {
+
+    }
+
+    public Refrigerator getMyRefrigerator() {
+        return myRefrigerator;
+    }
+
+    public void setMyRefrigerator(Refrigerator myRefrigerator) {
+        this.myRefrigerator = myRefrigerator;
+    }
+}
Index: gradleSetup/src/main/java/model/MakePasswordSHA_256.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/MakePasswordSHA_256.java b/gradleSetup/src/main/java/model/MakePasswordSHA_256.java
new file mode 100644
--- /dev/null	(date 1746136122679)
+++ b/gradleSetup/src/main/java/model/MakePasswordSHA_256.java	(date 1746136122679)
@@ -0,0 +1,38 @@
+package model;
+
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+import java.nio.charset.StandardCharsets;
+import java.util.Base64;
+
+public class MakePasswordSHA_256 {
+
+    public static String generateSalt() {
+        SecureRandom random = new SecureRandom();
+        byte[] salt = new byte[16];
+        random.nextBytes(salt);
+        return Base64.getEncoder().encodeToString(salt);
+    }
+
+    public static String hashPassword(String password, String salt) {
+        try {
+            MessageDigest digest = MessageDigest.getInstance("SHA-256");
+            String saltedPassword = salt + password;
+            byte[] encodedHash = digest.digest(saltedPassword.getBytes(StandardCharsets.UTF_8));
+            return bytesToHex(encodedHash);
+        } catch (NoSuchAlgorithmException e) {
+            throw new RuntimeException("SHA-256 algorithm not found!");
+        }
+    }
+
+    private static String bytesToHex(byte[] hash) {
+        StringBuilder hexString = new StringBuilder(2 * hash.length);
+        for (byte b : hash) {
+            String hex = Integer.toHexString(0xff & b);
+            if (hex.length() == 1) hexString.append('0');
+            hexString.append(hex);
+        }
+        return hexString.toString();
+    }
+}
Index: gradleSetup/src/main/java/model/Enums/commands/GameCommands/HouseMenuCommands.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Enums/commands/GameCommands/HouseMenuCommands.java b/gradleSetup/src/main/java/model/Enums/commands/GameCommands/HouseMenuCommands.java
new file mode 100644
--- /dev/null	(date 1746136122675)
+++ b/gradleSetup/src/main/java/model/Enums/commands/GameCommands/HouseMenuCommands.java	(date 1746136122675)
@@ -0,0 +1,24 @@
+package model.Enums.commands.GameCommands;
+
+import model.Enums.commands.Commands;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public enum HouseMenuCommands implements Commands {
+    refrigeratorPick("cooking\\s+refrigerator\\s+pick\\s+(.+)"),
+    refrigeratorPut("cooking\\s+refrigerator\\s+put\\s+(.+)"),
+    showRecipes("cooking show recipes"),
+    prepareRecipe("cooking prepare (.+)");
+
+    private final String pattern;
+    HouseMenuCommands(String pattern) {
+        this.pattern = pattern;
+    }
+
+    @Override
+    public Matcher getMatcher(String input) {
+        Pattern compiledPattern = Pattern.compile(this.pattern);
+        return compiledPattern.matcher(input);
+    }
+}
Index: gradleSetup/src/main/java/model/Enums/commands/GameCommands/TradeCommands.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Enums/commands/GameCommands/TradeCommands.java b/gradleSetup/src/main/java/model/Enums/commands/GameCommands/TradeCommands.java
new file mode 100644
--- /dev/null	(date 1746136122676)
+++ b/gradleSetup/src/main/java/model/Enums/commands/GameCommands/TradeCommands.java	(date 1746136122676)
@@ -0,0 +1,22 @@
+package model.Enums.commands.GameCommands;
+import model.Enums.commands.Commands;
+
+import java.util.regex.Matcher;
+
+public enum TradeCommands implements Commands {
+    startTrade("\\s*start\\s+trade\\s*"),
+    tradeWithPlayer("\\s*trade\\s+-u\\s+(.+)\\s+-t\\s+(.+)\\s+-i\\s+(.+)\\s+-a\\s+(.+)\\s+"+
+            "\\[-p\\s+(.+)\\]\\s+\\[-ti\\s+(.+)\\s+-ta\\s+(.+)\\]\\s*"),
+    tradeList("\\s*trade\\s+list\\s*"),
+    tradeHistory("\\s*trade\\s+history\\s*"),
+    tradeResponse("\\s*trade\\s+response\\s+\\((.+)\\)\\s+-i\\s+(.+)\\s*")
+    ;
+    final String regex;
+    TradeCommands(String regex){
+        this.regex = regex;
+    }
+    @Override
+    public Matcher getMatcher(String input) {
+        return null;
+    }
+}
Index: gradleSetup/src/main/java/model/Activities/CookFood.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.Activities;\r\n\r\nimport model.items.Item;\r\n\r\nimport java.util.HashMap;\r\n\r\npublic abstract class CookFood {\r\n    private String name;\r\n    private HashMap<Item, Integer> ingredients = new HashMap<>();\r\n    private int energy;\r\n    private int price;\r\n\r\n    protected CookFood(String name, HashMap<Item, Integer> ingredients, int energy, int price) {\r\n        this.name = name;\r\n        this.ingredients = ingredients;\r\n        this.energy = energy;\r\n        this.price = price;\r\n    }\r\n\r\n\r\n    public HashMap<Item, Integer> getIngredients() {\r\n        return ingredients;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public int getEnergy() {\r\n        return energy;\r\n    }\r\n\r\n    public int getPrice() {\r\n        return price;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Activities/CookFood.java b/gradleSetup/src/main/java/model/Activities/CookFood.java
--- a/gradleSetup/src/main/java/model/Activities/CookFood.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/Activities/CookFood.java	(date 1746136122674)
@@ -1,23 +1,34 @@
 package model.Activities;
 
+import com.google.gson.annotations.Expose;
 import model.items.Item;
 
 import java.util.HashMap;
 
 public abstract class CookFood {
     private String name;
-    private HashMap<Item, Integer> ingredients = new HashMap<>();
+    private String ingridient;
     private int energy;
+    private String source;
+    private String buff;
     private int price;
+    @Expose(serialize = false, deserialize = false)
+    private HashMap<Item, Integer> ingredients = new HashMap<>();
+    @Expose(serialize = false, deserialize = false)
+    private int buyPrice;
 
-    protected CookFood(String name, HashMap<Item, Integer> ingredients, int energy, int price) {
+    protected CookFood(String name, String ingridient, int energy, String source , String buff, int price) {
         this.name = name;
-        this.ingredients = ingredients;
+        this.ingridient = ingridient;
         this.energy = energy;
+        this.source =  source;
+        this.buff = buff;
         this.price = price;
     }
 
-
+    public void setIngredients(HashMap<Item, Integer> ingredients) {
+        this.ingredients = ingredients;
+    }
     public HashMap<Item, Integer> getIngredients() {
         return ingredients;
     }
@@ -33,4 +44,28 @@
     public int getPrice() {
         return price;
     }
+
+    public String getIngridient() {
+        return ingridient;
+    }
+
+    public void setIngridient(String ingridient) {
+        this.ingridient = ingridient;
+    }
+
+    public String getSource() {
+        return source;
+    }
+
+    public String getBuff() {
+        return buff;
+    }
+
+    public int getBuyPrice() {
+        return buyPrice;
+    }
+
+    public void setBuyPrice(int buyPrice) {
+        this.buyPrice = buyPrice;
+    }
 }
Index: gradleSetup/src/main/java/view/HouseMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/view/HouseMenu.java b/gradleSetup/src/main/java/view/HouseMenu.java
new file mode 100644
--- /dev/null	(date 1746136122685)
+++ b/gradleSetup/src/main/java/view/HouseMenu.java	(date 1746136122685)
@@ -0,0 +1,24 @@
+package view;
+
+import controller.GameMenuController.CookingController;
+import model.Enums.commands.GameCommands.HouseMenuCommands;
+
+import java.util.Scanner;
+import java.util.regex.Matcher;
+
+public class HouseMenu implements AppMenu {
+    @Override
+    public void check(Scanner scanner) {
+        String input  = scanner.nextLine();
+        Matcher matcher;
+        if((matcher = HouseMenuCommands.refrigeratorPut.getMatcher(input)).find()) {
+            System.out.println(CookingController.refrigeratorPut(matcher));
+        } else if((matcher = HouseMenuCommands.refrigeratorPick.getMatcher(input)).find()) {
+            System.out.println(CookingController.refrigeratorPick(matcher));
+        } else if ((matcher = HouseMenuCommands.refrigeratorPick.getMatcher(input)).find()) {
+            System.out.println(CookingController.showRecipes());
+        } else if((matcher = HouseMenuCommands.prepareRecipe.getMatcher(input)).find()) {
+            System.out.println(CookingController.showRecipes()+""+CookingController.prepareCooking(matcher));
+        }
+    }
+}
Index: gradleSetup/src/main/java/view/TradeMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/view/TradeMenu.java b/gradleSetup/src/main/java/view/TradeMenu.java
new file mode 100644
--- /dev/null	(date 1746136122686)
+++ b/gradleSetup/src/main/java/view/TradeMenu.java	(date 1746136122686)
@@ -0,0 +1,13 @@
+package view;
+
+import java.util.Scanner;
+import java.util.regex.Matcher;
+
+public class TradeMenu implements AppMenu {
+
+    @Override
+    public void check(Scanner scanner) {
+        String input = scanner.nextLine();
+        Matcher matcher;
+    }
+}
Index: gradleSetup/src/main/java/model/GameObject/Refrigerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.GameObject;\r\n\r\nimport model.Locations.Position;\r\nimport model.items.Item;\r\n\r\nimport java.util.HashMap;\r\n\r\npublic class Refrigerator extends GameObject {\r\n    private HashMap<Item,Integer> foods = new HashMap<>();\r\n\r\n    public Refrigerator(Position position, int width, int height, boolean[][] walkable) {\r\n        super(position, width, height, walkable);\r\n    }\r\n\r\n    public void addItems(Item food, int quantity) {\r\n        //TODO\r\n        foods.put(food, quantity);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/GameObject/Refrigerator.java b/gradleSetup/src/main/java/model/GameObject/Refrigerator.java
--- a/gradleSetup/src/main/java/model/GameObject/Refrigerator.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/GameObject/Refrigerator.java	(date 1746136122678)
@@ -1,19 +1,26 @@
 package model.GameObject;
 
 import model.Locations.Position;
+import model.items.Inventory;
 import model.items.Item;
 
+import java.util.ArrayList;
 import java.util.HashMap;
 
 public class Refrigerator extends GameObject {
-    private HashMap<Item,Integer> foods = new HashMap<>();
+    private Inventory inventory;
 
-    public Refrigerator(Position position, int width, int height, boolean[][] walkable) {
+    public Refrigerator(Position position, int width, int height, boolean[][] walkable,Inventory inventory) {
         super(position, width, height, walkable);
+        this.inventory = inventory;
     }
 
-    public void addItems(Item food, int quantity) {
-        //TODO
-        foods.put(food, quantity);
+
+    public Inventory getInventory() {
+        return inventory;
+    }
+
+    public void setInventory(Inventory inventory) {
+        this.inventory = inventory;
     }
 }
Index: gradleSetup/src/main/java/view/ProfileMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport controller.MenuController.ProfileMenuController;\r\nimport model.App;\r\nimport model.Enums.Menu;\r\nimport model.Enums.commands.ProfileMenuCommands;\r\n\r\nimport java.util.Scanner;\r\nimport java.util.regex.Matcher;\r\n\r\npublic class ProfileMenu implements AppMenu {\r\n    @Override\r\n    public void check(Scanner scanner) {\r\n        String input = scanner.nextLine();\r\n        Matcher matcher;\r\n        if(ProfileMenuCommands.ShowCurrentMenu.getMatcher(input) != null) {\r\n            System.out.println(\"you are in profile menu\");\r\n        } else if((matcher = ProfileMenuCommands.changeEmail.getMatcher(input)) != null) {\r\n            System.out.println(ProfileMenuController.manageChangeEmail(matcher.group(1)).getMessage());\r\n        } else if((matcher = ProfileMenuCommands.changePassword.getMatcher(input)) != null) {\r\n            System.out.println(ProfileMenuController.manageChangePassword(matcher.group(1),matcher.group(2)).getMessage());\r\n        } else if((matcher = ProfileMenuCommands.changeUserName.getMatcher(input)) != null) {\r\n            System.out.println(ProfileMenuController.manageChangeUsername(matcher.group(1)).getMessage());\r\n        } else if(ProfileMenuCommands.changeNickName.getMatcher(input) != null) {\r\n            System.out.println(ProfileMenuController.manageChangeNickName(matcher.group(1)).getMessage());\r\n        } else if(ProfileMenuCommands.showUserInformation.getMatcher(input) != null) {\r\n            System.out.println(ProfileMenuController.UserInfo().getMessage());\r\n        } if (ProfileMenuCommands.BackToMainMenu.getMatcher(input) != null) {\r\n            System.out.println(\"Bezan Berim Be Main Menu...\");\r\n            App.setCurrentMenu(Menu.mainMenu);\r\n        }else {\r\n            System.out.println(\"invalid command bro!..\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/view/ProfileMenu.java b/gradleSetup/src/main/java/view/ProfileMenu.java
--- a/gradleSetup/src/main/java/view/ProfileMenu.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/view/ProfileMenu.java	(date 1746136122686)
@@ -13,22 +13,22 @@
     public void check(Scanner scanner) {
         String input = scanner.nextLine();
         Matcher matcher;
-        if(ProfileMenuCommands.ShowCurrentMenu.getMatcher(input) != null) {
-            System.out.println("you are in profile menu");
-        } else if((matcher = ProfileMenuCommands.changeEmail.getMatcher(input)) != null) {
+        if (ProfileMenuCommands.ShowCurrentMenu.getMatcher(input) != null) {
+            System.out.println("you are in profile menu!");
+        } else if ((matcher = ProfileMenuCommands.changeEmail.getMatcher(input)) != null) {
             System.out.println(ProfileMenuController.manageChangeEmail(matcher.group(1)).getMessage());
-        } else if((matcher = ProfileMenuCommands.changePassword.getMatcher(input)) != null) {
-            System.out.println(ProfileMenuController.manageChangePassword(matcher.group(1),matcher.group(2)).getMessage());
-        } else if((matcher = ProfileMenuCommands.changeUserName.getMatcher(input)) != null) {
+        } else if ((matcher = ProfileMenuCommands.changePassword.getMatcher(input)) != null) {
+            System.out.println(ProfileMenuController.manageChangePassword(matcher.group(1), matcher.group(2)).getMessage());
+        } else if ((matcher = ProfileMenuCommands.changeUserName.getMatcher(input)) != null) {
             System.out.println(ProfileMenuController.manageChangeUsername(matcher.group(1)).getMessage());
-        } else if(ProfileMenuCommands.changeNickName.getMatcher(input) != null) {
+        } else if ((matcher = ProfileMenuCommands.changeNickName.getMatcher(input)) != null) {
             System.out.println(ProfileMenuController.manageChangeNickName(matcher.group(1)).getMessage());
-        } else if(ProfileMenuCommands.showUserInformation.getMatcher(input) != null) {
+        } else if (ProfileMenuCommands.showUserInformation.getMatcher(input) != null) {
             System.out.println(ProfileMenuController.UserInfo().getMessage());
-        } if (ProfileMenuCommands.BackToMainMenu.getMatcher(input) != null) {
-            System.out.println("Bezan Berim Be Main Menu...");
+        } else if (ProfileMenuCommands.Back.getMatcher(input) != null) {
             App.setCurrentMenu(Menu.mainMenu);
-        }else {
+            System.out.println("you are in main menu now!");
+        } else {
             System.out.println("invalid command bro!..");
         }
     }
Index: gradleSetup/src/main/java/view/MainMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport controller.MenuController.MainMenuController;\r\nimport model.Enums.commands.MainMenuCommands;\r\n\r\n\r\nimport java.util.Scanner;\r\nimport java.util.regex.Matcher;\r\n\r\npublic class MainMenu implements AppMenu {\r\n    @Override\r\n    public void check(Scanner scanner) {\r\n        String input = scanner.nextLine();\r\n        Matcher matcher;\r\n        if ((matcher = MainMenuCommands.ShowCurrentMenu.getMatcher(input)).find()) {\r\n            System.out.println(\"you are in Main Menu BROOOOO!\");\r\n        } else if ((matcher = MainMenuCommands.goMenu.getMatcher(input)).find()) {\r\n            String menu = matcher.group(1);\r\n            System.out.println(MainMenuController.goToMenu(menu));\r\n        } else if ((matcher = MainMenuCommands.logout.getMatcher(input)).find()) {\r\n            System.out.println(MainMenuController.manageUserLogout());\r\n        }else {\r\n            System.out.println(\"invalid command bro!..\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/view/MainMenu.java b/gradleSetup/src/main/java/view/MainMenu.java
--- a/gradleSetup/src/main/java/view/MainMenu.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/view/MainMenu.java	(date 1746136122686)
@@ -1,6 +1,8 @@
 package view;
 
 import controller.MenuController.MainMenuController;
+import model.App;
+import model.Enums.Menu;
 import model.Enums.commands.MainMenuCommands;
 
 
@@ -19,7 +21,10 @@
             System.out.println(MainMenuController.goToMenu(menu));
         } else if ((matcher = MainMenuCommands.logout.getMatcher(input)).find()) {
             System.out.println(MainMenuController.manageUserLogout());
-        }else {
+        } else if ((matcher = MainMenuCommands.back.getMatcher(input)).find()) {
+            App.setCurrentMenu(Menu.loginMenu);
+            System.out.println("you are in login menu now!");
+        } else {
             System.out.println("invalid command bro!..");
         }
     }
Index: gradleSetup/src/main/java/view/GameMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class GameMenu implements AppMenu {\r\n    @Override\r\n    public void check(Scanner scanner) {\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/view/GameMenu.java b/gradleSetup/src/main/java/view/GameMenu.java
--- a/gradleSetup/src/main/java/view/GameMenu.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/view/GameMenu.java	(date 1746136122685)
@@ -1,11 +1,47 @@
 package view;
 
+import model.Enums.commands.GameCommands.GameCommands;
+import model.Enums.commands.GameCommands.HouseMenuCommands;
+
+import java.sql.SQLOutput;
 import java.util.Scanner;
+import java.util.regex.Matcher;
 
 public class GameMenu implements AppMenu {
     @Override
     public void check(Scanner scanner) {
+        String input = scanner.nextLine();
+
+        if (GameCheck(input) ||
+                DateTimeCheck(input) ||
+                WeatherCheck(input) ||
+                MapCheck(input) ||
+                EnergyAndSkillsCheck(input) ||
+                ToolsCheck(input) ||
+                FarmingCheck(input) ||
+                CraftingCheck(input) ||
+                HusbandryCheck(input) ||
+                ArtisanCheck(input) ||
+                TradeCheck(input) ||
+                RelationShipCheck(input) ||
+                NPCCheck(input)
+        ) {
+
+            return;
+        } else {
+            System.out.println("invalid command");
+        }
+
+
     }
+
+    public boolean GameCheck(String input) {
+        Matcher matcher;
+        if((matcher = GameCommands.eat.getMatcher(input)).find()) {
+            System.out.println(matcher);
+        }
+    }
+
 }
 
 
Index: gradleSetup/src/main/java/view/AppView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport model.App;\r\nimport model.Enums.Menu;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class AppView {\r\n    public void run() {\r\n        Scanner scanner = new Scanner(System.in);\r\n        do {\r\n            App.getCurrentMenu().checkCommand(scanner);\r\n        } while (App.getCurrentMenu() != Menu.exitMenu);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/view/AppView.java b/gradleSetup/src/main/java/view/AppView.java
--- a/gradleSetup/src/main/java/view/AppView.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/view/AppView.java	(date 1746136122685)
@@ -1,8 +1,14 @@
 package view;
 
+import com.google.gson.Gson;
 import model.App;
 import model.Enums.Menu;
+import model.User;
 
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+import java.io.Reader;
 import java.util.Scanner;
 
 public class AppView {
Index: gradleSetup/src/main/java/model/TimeSystem/DateTime.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.TimeSystem;\r\n\r\nimport model.Enums.WeatherAndTime.DayOfWeek;\r\nimport model.Enums.WeatherAndTime.Seasons;\r\n\r\npublic class DateTime {\r\n    private int hour;\r\n    private int day;\r\n\r\n    DateTime( int day,int hour) {\r\n        this.day = day;\r\n        this.hour = hour;\r\n    }\r\n\r\n    public int getHour() {\r\n        return hour;\r\n    }\r\n\r\n    public void setHour(int hour) {\r\n        this.hour = hour;\r\n    }\r\n\r\n    public int getDay() {\r\n        return day;\r\n    }\r\n\r\n    public void setDay(int day) {\r\n        this.day = day;\r\n    }\r\n\r\n    public void addHour(int hour) {\r\n        this.hour += hour;\r\n    }\r\n    //TODO\r\n    public Seasons getSeason(){\r\n        return null;\r\n    }\r\n    //TODO\r\n    public DayOfWeek getDayOfWeek(){\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/TimeSystem/DateTime.java b/gradleSetup/src/main/java/model/TimeSystem/DateTime.java
--- a/gradleSetup/src/main/java/model/TimeSystem/DateTime.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/TimeSystem/DateTime.java	(date 1746136122681)
@@ -31,6 +31,10 @@
     public void addHour(int hour) {
         this.hour += hour;
     }
+
+    public void addDay(int day) {
+        this.day += day;
+    }
     //TODO
     public Seasons getSeason(){
         return null;
Index: gradleSetup/src/main/java/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class User {\r\n    private String username;\r\n    private String name;\r\n    private String password;\r\n    private String email;\r\n    private int securityQuestion;\r\n    private String answer;\r\n    private Boolean gender;//True = male  false = female\r\n    private Game currentGame;\r\n    private final ArrayList<Game> games = new ArrayList<>();\r\n    private int numOfGames;\r\n    private int highScore;\r\n    private Player player;\r\n\r\n    public User(String username, String name, String password, String email, int securityQuestion,\r\n                String answer, Boolean gender) {\r\n        this.username = username;\r\n        this.name = name;\r\n        this.password = password;\r\n        this.email = email;\r\n        this.securityQuestion = securityQuestion;\r\n        this.answer = answer;\r\n        this.gender = gender;\r\n        this.numOfGames = 0;\r\n        this.highScore = 0;\r\n        this.currentGame = null;\r\n        this.player = null;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n\r\n    public void setEmail(String email) {\r\n        this.email = email;\r\n    }\r\n\r\n    public int getSecurityQuestion() {\r\n        return securityQuestion;\r\n    }\r\n\r\n    public void setSecurityQuestion(int securityQuestion) {\r\n        this.securityQuestion = securityQuestion;\r\n    }\r\n\r\n    public String getAnswer() {\r\n        return answer;\r\n    }\r\n\r\n    public void setAnswer(String answer) {\r\n        this.answer = answer;\r\n    }\r\n\r\n    public Boolean getGender() {\r\n        return gender;\r\n    }\r\n\r\n    public void setGender(Boolean gender) {\r\n        this.gender = gender;\r\n    }\r\n\r\n    public Game getCurrentGame() {\r\n        return currentGame;\r\n    }\r\n\r\n    public void setCurrentGame(Game currentGame) {\r\n        this.currentGame = currentGame;\r\n    }\r\n\r\n    public int getNumOfGames() {\r\n        return numOfGames;\r\n    }\r\n\r\n    public void setNumOfGames(int numOfGames) {\r\n        this.numOfGames = numOfGames;\r\n    }\r\n\r\n    public int getHighScore() {\r\n        return highScore;\r\n    }\r\n\r\n    public void setHighScore(int highScore) {\r\n        this.highScore = highScore;\r\n    }\r\n\r\n    public ArrayList<Game> getGames() {\r\n        return games;\r\n    }\r\n\r\n    public Player getPlayer() {\r\n        return player;\r\n    }\r\n\r\n    public void setPlayer(Player player) {\r\n        this.player = player;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/User.java b/gradleSetup/src/main/java/model/User.java
--- a/gradleSetup/src/main/java/model/User.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/User.java	(date 1746136122681)
@@ -1,26 +1,32 @@
 package model;
 
+import com.google.gson.annotations.Expose;
+
 import java.util.ArrayList;
 
 public class User {
+    private String userId;
     private String username;
     private String name;
     private String password;
+    private String salt;
     private String email;
     private int securityQuestion;
     private String answer;
     private Boolean gender;//True = male  false = female
+    private String gameId;
+    @Expose(serialize = false, deserialize = false)
     private Game currentGame;
-    private final ArrayList<Game> games = new ArrayList<>();
     private int numOfGames;
     private int highScore;
-    private Player player;
+    private final ArrayList<String> allGamesId = new ArrayList<>();
 
-    public User(String username, String name, String password, String email, int securityQuestion,
+    public User(String username, String name, String password, String salt, String email, int securityQuestion,
                 String answer, Boolean gender) {
         this.username = username;
         this.name = name;
         this.password = password;
+        this.salt = salt;
         this.email = email;
         this.securityQuestion = securityQuestion;
         this.answer = answer;
@@ -28,7 +34,7 @@
         this.numOfGames = 0;
         this.highScore = 0;
         this.currentGame = null;
-        this.player = null;
+        this.gameId = null;
     }
 
     public String getUsername() {
@@ -111,15 +117,31 @@
         this.highScore = highScore;
     }
 
-    public ArrayList<Game> getGames() {
-        return games;
+    public String getSalt() {
+        return salt;
+    }
+
+    public void setSalt(String salt) {
+        this.salt = salt;
+    }
+
+    public String getUserId() {
+        return userId;
     }
 
-    public Player getPlayer() {
-        return player;
+    public void setUserId(String userId) {
+        this.userId = userId;
     }
 
-    public void setPlayer(Player player) {
-        this.player = player;
+    public String getGameId() {
+        return gameId;
     }
-}
+
+    public void setGameId(String gameId) {
+        this.gameId = gameId;
+    }
+
+    public ArrayList<String> getAllGamesId() {
+        return allGamesId;
+    }
+}
\ No newline at end of file
Index: gradleSetup/src/main/java/controller/CommandController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport model.App;\r\nimport model.Enums.Menu;\r\nimport model.Result;\r\n\r\npublic class CommandController {\r\n\r\n    public static Result goToMenu(String name) {\r\n        if (App.getCurrentMenu().equals(Menu.gameMenu)) {\r\n            if (name.equals(\"game Menu\")) {\r\n                return new Result(true, \"You already in it!\");\r\n            } else {\r\n                return new Result(false, \"you can't go there!\");\r\n            }\r\n        } else if (App.getCurrentMenu().equals(Menu.loginMenu)) {\r\n            if (name.equals(\"login Menu\")) {\r\n                return new Result(true, \"You already in it!\");\r\n            } else if (name.equals(\"main Menu\")) {\r\n                App.setCurrentMenu(Menu.mainMenu);\r\n                return new Result(true, \"you are in the main Menu now!\");\r\n            } else {\r\n                return new Result(false, \"you can't go there!\");\r\n            }\r\n        } else if (App.getCurrentMenu().equals(Menu.mainMenu)) {\r\n            if (name.equals(\"main Menu\")) {\r\n                return new Result(true, \"You already in it!\");\r\n            } else if (name.equals(\"game Menu\")) {\r\n                App.setCurrentMenu(Menu.gameMenu);\r\n                return new Result(true, \"you are in the game Menu now!\");\r\n            } else if (name.equals(\"profile Menu\")) {\r\n                App.setCurrentMenu(Menu.profileMenu);\r\n                return new Result(true, \"you are in the profile Menu now!\");\r\n            } else if (name.equals(\"avatar Menu\")) {\r\n                App.setCurrentMenu(Menu.avatarMenu);\r\n                return new Result(true, \"you are in the avatar Menu now!\");\r\n            } else {\r\n                return new Result(false, \"you can't go there!\");\r\n            }\r\n        } else if (App.getCurrentMenu().equals(Menu.profileMenu)) {\r\n            if (name.equals(\"profile Menu\")) {\r\n                return new Result(true, \"You already in it!\");\r\n            } else {\r\n                return new Result(false, \"you can't go there!\");\r\n            }\r\n        }\r\n        return new Result(false, \"oh shittt , here we go again!\");\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/controller/CommandController.java b/gradleSetup/src/main/java/controller/CommandController.java
--- a/gradleSetup/src/main/java/controller/CommandController.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/controller/CommandController.java	(date 1746136122670)
@@ -8,37 +8,40 @@
 
     public static Result goToMenu(String name) {
         if (App.getCurrentMenu().equals(Menu.gameMenu)) {
-            if (name.equals("game Menu")) {
+            if (name.equals("game menu")) {
                 return new Result(true, "You already in it!");
             } else {
                 return new Result(false, "you can't go there!");
             }
         } else if (App.getCurrentMenu().equals(Menu.loginMenu)) {
-            if (name.equals("login Menu")) {
+            if (name.equals("login menu")) {
                 return new Result(true, "You already in it!");
-            } else if (name.equals("main Menu")) {
+            } else if (name.equals("main menu")) {
+                if(App.getCurrentUser() == null){
+                    return new Result(false, "You are not logged in!");
+                }
                 App.setCurrentMenu(Menu.mainMenu);
                 return new Result(true, "you are in the main Menu now!");
             } else {
                 return new Result(false, "you can't go there!");
             }
         } else if (App.getCurrentMenu().equals(Menu.mainMenu)) {
-            if (name.equals("main Menu")) {
+            if (name.equals("main menu")) {
                 return new Result(true, "You already in it!");
-            } else if (name.equals("game Menu")) {
+            } else if (name.equals("game menu")) {
                 App.setCurrentMenu(Menu.gameMenu);
                 return new Result(true, "you are in the game Menu now!");
-            } else if (name.equals("profile Menu")) {
+            } else if (name.equals("profile menu")) {
                 App.setCurrentMenu(Menu.profileMenu);
                 return new Result(true, "you are in the profile Menu now!");
-            } else if (name.equals("avatar Menu")) {
+            } else if (name.equals("avatar menu")) {
                 App.setCurrentMenu(Menu.avatarMenu);
                 return new Result(true, "you are in the avatar Menu now!");
             } else {
                 return new Result(false, "you can't go there!");
             }
         } else if (App.getCurrentMenu().equals(Menu.profileMenu)) {
-            if (name.equals("profile Menu")) {
+            if (name.equals("profile menu")) {
                 return new Result(true, "You already in it!");
             } else {
                 return new Result(false, "you can't go there!");
Index: gradleSetup/src/main/java/controller/MenuController/MainMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller.MenuController;\r\n\r\nimport controller.CommandController;\r\nimport model.App;\r\nimport model.Enums.Menu;\r\nimport model.Result;\r\n\r\npublic class MainMenuController extends CommandController {\r\n    public static Result manageUserLogout() {\r\n        App.setCurrentMenu(Menu.loginMenu);\r\n        App.setCurrentUser(null);\r\n        return new Result(true, \"You have been logged out!\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/controller/MenuController/MainMenuController.java b/gradleSetup/src/main/java/controller/MenuController/MainMenuController.java
--- a/gradleSetup/src/main/java/controller/MenuController/MainMenuController.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/controller/MenuController/MainMenuController.java	(date 1746136122673)
@@ -5,10 +5,15 @@
 import model.Enums.Menu;
 import model.Result;
 
+import java.io.File;
+
 public class MainMenuController extends CommandController {
+    private static final String FILE_PATH_FOR_STAY_LOGGED = "StayLoggedIn.json";
     public static Result manageUserLogout() {
         App.setCurrentMenu(Menu.loginMenu);
         App.setCurrentUser(null);
+        File file = new File(FILE_PATH_FOR_STAY_LOGGED);
+        file.delete();
         return new Result(true, "You have been logged out!");
     }
 }
Index: gradleSetup/src/main/java/controller/MenuController/LoginMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller.MenuController;\r\n\r\nimport com.google.gson.Gson;\r\nimport controller.CommandController;\r\nimport model.App;\r\nimport model.Enums.InfoRegexes;\r\nimport model.Enums.SecurityQuestion;\r\nimport model.Result;\r\nimport model.User;\r\n\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.security.SecureRandom;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Random;\r\nimport java.util.regex.Matcher;\r\n\r\npublic class LoginMenuController extends CommandController {\r\n\r\n    public static Result manageRegisterUser(Matcher matcher) {\r\n        Random random = new Random();\r\n        String username = matcher.group(1);\r\n        String password = matcher.group(2);\r\n        String rePassword = matcher.group(3);\r\n        String nickName = matcher.group(4);\r\n        String email = matcher.group(5);\r\n        String gender = matcher.group(6);\r\n        if (returnUser(username) == null) {\r\n            return new Result(false, \"WTF!, no user found with such name! but if you can use \" + makeRandomUserName(username) + \" if you want!\");\r\n        } else if (!InfoRegexes.usersName.isValid(username)) {\r\n            return new Result(false, \"do yo wanna play game with me?(username is incorrect)\");\r\n        } else if (!InfoRegexes.email.isValid(email)) {\r\n            return new Result(false, \"please enter valid email!\");\r\n        } else if (!InfoRegexes.password.isValid(password)) {\r\n            return new Result(false, \"please enter correct password! but you can use \" + manageMakeRandomPassword(random.nextInt(10, 20)));\r\n        } else if (password.length() < 8) {\r\n            return new Result(false, \"password is too short!\");\r\n        } else if (!password.equals(rePassword)) {\r\n            return new Result(false, \"passwords do not match!\");\r\n        }\r\n        String result = showSecurityQuestion();\r\n        return new Result(true, result + \"choose between this!\");\r\n\r\n    }\r\n\r\n    private static String showSecurityQuestion() {\r\n        StringBuilder stringBuilder = new StringBuilder();\r\n        SecurityQuestion[] questions = SecurityQuestion.values();\r\n        for (int i = 0; i < questions.length; i++) {\r\n            stringBuilder.append((i + 1))\r\n                    .append(\". \")\r\n                    .append(questions[i].getQuestion())\r\n                    .append(\"\\n\");\r\n        }\r\n        return stringBuilder.toString();\r\n    }\r\n\r\n    public static Result answer(Matcher matcher, Matcher matcher1) {\r\n        String username = matcher1.group(1);\r\n        String answer = matcher.group(1);\r\n        if(!returnUser(username).getAnswer().equals(answer)) {\r\n            return new Result(false, \"wrong answer!!!\");\r\n        }\r\n\r\n        StringBuilder stringBuilder = new StringBuilder();\r\n        stringBuilder.append(\"please enter new password : \").append(\"\\nyou can use this : \");\r\n        stringBuilder.append(manageMakeRandomPassword(10));\r\n        return new Result(true, stringBuilder.toString());\r\n    }\r\n    public static Result manageAnswerForgotPassword(String input,Matcher matcher) {\r\n        if(!InfoRegexes.password.isValid(input)) {\r\n            return new Result(false, \"sorry! is not correct!(babol)\");\r\n        }\r\n        String username = matcher.group(1);\r\n        for(User user : App.getUsers()) {\r\n            if(user.getUsername().equals(username)) {\r\n                user.setPassword(input);\r\n            }\r\n        }\r\n        return new Result(true, username + \"your password have been changed!\");\r\n    }\r\n\r\n\r\n    public static String manageMakeRandomPassword(int length) {\r\n        if (length < 8) {\r\n            throw new IllegalArgumentException(\"طول رمز عبور باید حداقل ۸ کاراکتر باشد.\");\r\n        }\r\n        String upper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\r\n        String lower = \"abcdefghijklmnopqrstuvwxyz\";\r\n        String digits = \"0123456789\";\r\n        String symbols = \"?<>',;:\\\\/|[]{}+=)(*&^%$#@!\";\r\n        String allChars = upper + lower + digits + symbols;\r\n\r\n        SecureRandom random = new SecureRandom();\r\n        List<Character> passwordChars = new ArrayList<>();\r\n        passwordChars.add(upper.charAt(random.nextInt(upper.length())));\r\n        passwordChars.add(lower.charAt(random.nextInt(lower.length())));\r\n        passwordChars.add(digits.charAt(random.nextInt(digits.length())));\r\n        passwordChars.add(symbols.charAt(random.nextInt(symbols.length())));\r\n        for (int i = 4; i < length; i++) {\r\n            passwordChars.add(allChars.charAt(random.nextInt(allChars.length())));\r\n        }\r\n        Collections.shuffle(passwordChars);\r\n\r\n        StringBuilder password = new StringBuilder();\r\n        for (char c : passwordChars) {\r\n            password.append(c);\r\n        }\r\n\r\n        return password.toString();\r\n    }\r\n\r\n    public static Result manageLoginUser(Matcher matcher, boolean stayLoggedIn) {\r\n        String username = matcher.group(1);\r\n        String password = matcher.group(2);\r\n        if(returnUser(username) == null) {\r\n            return new Result(false,\"there is no user found with such name!\");\r\n        } else if(!returnUser(username).getPassword().equals(password)) {\r\n            return new Result(false,\"password is incorrect!\");\r\n        }\r\n        if(stayLoggedIn) {\r\n            //TODO\r\n        } else {\r\n            App.setCurrentUser(returnUser(username));\r\n        }\r\n        return new Result(true, \"you have successfully logged in!\");\r\n\r\n    }\r\n\r\n    public static Result manageForgotPassword(Matcher matcher) {\r\n        String username = matcher.group(1);\r\n        if(returnUser(username) == null) {\r\n            return new Result(false,\"there is no user found with such name!\");\r\n        }\r\n        SecurityQuestion[] questions = SecurityQuestion.values();\r\n        return new  Result(true, \"answer the question!\"+\"\\n\"+questions[returnUser(username).getSecurityQuestion()]);\r\n    }\r\n\r\n    private static User returnUser(String username) {\r\n        for (User user : App.getUsers()) {\r\n            if (user.getUsername().equals(username)) {\r\n                return user;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static Result peakSecurityQuestion(Matcher matcher1, Matcher matcher) {\r\n        Random random = new Random();\r\n        String username = matcher.group(1).trim();\r\n        String password = matcher.group(2).trim();\r\n        String rePassword = matcher.group(3).trim();\r\n        String nickName = matcher.group(4).trim();\r\n        String email = matcher.group(5).trim();\r\n        String gender = matcher.group(6).trim();\r\n        boolean gender1;\r\n        if(gender.equals(\"male\")){\r\n            gender1 = true;\r\n        }else {\r\n            gender1 = false;\r\n        }\r\n        int QuestionNumber = Integer.parseInt(matcher1.group(1).trim());\r\n        String answer = matcher1.group(2).trim();\r\n        String answerConfirmation = matcher1.group(3).trim();\r\n\r\n        if (QuestionNumber > 10 || QuestionNumber < 0) {\r\n            return new Result(false, \"choose beetWeen 1 to 10!\");\r\n        } else if (!answer.equals(answerConfirmation)) {\r\n            return new Result(false, \"wrong answer confirmation!\");\r\n        }\r\n        User user = new User(username,nickName,password,email,QuestionNumber,answer,gender1);\r\n        //TODO\r\n        Gson gson = new Gson();\r\n        try (FileWriter writer = new FileWriter(\"Users.json\")) {\r\n            gson.toJson(user, writer);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return new Result(true, \"you were Registered!\");\r\n\r\n    }\r\n\r\n    private static String makeRandomUserName(String username) {\r\n        Random random = new Random();\r\n        String newUserName = username;\r\n\r\n        while (returnUser(newUserName) == null) {\r\n\r\n            boolean randomBoolean = random.nextBoolean();\r\n            if (randomBoolean) {\r\n                int randomNumber = random.nextInt(1000);  // عددی بین 0 تا 999\r\n                newUserName = username + randomNumber;\r\n            } else {\r\n                newUserName = username + \"-\";\r\n            }\r\n        }\r\n        return newUserName;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/controller/MenuController/LoginMenuController.java b/gradleSetup/src/main/java/controller/MenuController/LoginMenuController.java
--- a/gradleSetup/src/main/java/controller/MenuController/LoginMenuController.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/controller/MenuController/LoginMenuController.java	(date 1746136122673)
@@ -5,43 +5,49 @@
 import model.App;
 import model.Enums.InfoRegexes;
 import model.Enums.SecurityQuestion;
+import model.MakePasswordSHA_256;
 import model.Result;
 import model.User;
 
 import java.io.FileWriter;
 import java.io.IOException;
+import java.io.OutputStreamWriter;
+import java.io.Writer;
 import java.security.SecureRandom;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Random;
 import java.util.regex.Matcher;
+import java.util.stream.Collectors;
 
 public class LoginMenuController extends CommandController {
 
     public static Result manageRegisterUser(Matcher matcher) {
         Random random = new Random();
         String username = matcher.group(1);
-        String password = matcher.group(2);
+        String password = matcher.group(2).trim();
         String rePassword = matcher.group(3);
         String nickName = matcher.group(4);
         String email = matcher.group(5);
         String gender = matcher.group(6);
-        if (returnUser(username) == null) {
-            return new Result(false, "WTF!, no user found with such name! but if you can use " + makeRandomUserName(username) + " if you want!");
-        } else if (!InfoRegexes.usersName.isValid(username)) {
-            return new Result(false, "do yo wanna play game with me?(username is incorrect)");
+        if (!InfoRegexes.usersName.isValid(username)) {
+            return new Result(false, "do yo wanna play game with me?(username is incorrect) you can use " + makeRandomUserName());
+        } else if (returnUser(username) != null) {
+            return new Result(false, "we already have an account with that name");
         } else if (!InfoRegexes.email.isValid(email)) {
             return new Result(false, "please enter valid email!");
         } else if (!InfoRegexes.password.isValid(password)) {
-            return new Result(false, "please enter correct password! but you can use " + manageMakeRandomPassword(random.nextInt(10, 20)));
+            return new Result(false, "please enter valid password!");
         } else if (password.length() < 8) {
-            return new Result(false, "password is too short!");
+            return new Result(false, "password is too short but  you can use " + manageMakeRandomPassword(random.nextInt(10, 12), password));
+        } else if (!InfoRegexes.strongPassword.isValid(password)) {
+            return new Result(false, "please only use special character and letter and number for password! but you can use " + manageMakeRandomPassword(random.nextInt(10, 12), password));
         } else if (!password.equals(rePassword)) {
             return new Result(false, "passwords do not match!");
         }
         String result = showSecurityQuestion();
-        return new Result(true, result + "choose between this!");
+        return new Result(true, "Okay, but for the security of your account ,\none of these security questions is required\n" + result + "\n");
 
     }
 
@@ -60,22 +66,23 @@
     public static Result answer(Matcher matcher, Matcher matcher1) {
         String username = matcher1.group(1);
         String answer = matcher.group(1);
-        if(!returnUser(username).getAnswer().equals(answer)) {
+        if (!App.getCurrentUser().getAnswer().equals(answer)) {
             return new Result(false, "wrong answer!!!");
         }
 
         StringBuilder stringBuilder = new StringBuilder();
         stringBuilder.append("please enter new password : ").append("\nyou can use this : ");
-        stringBuilder.append(manageMakeRandomPassword(10));
+        stringBuilder.append(manageMakeRandomPassword(10, "somthing"));
         return new Result(true, stringBuilder.toString());
     }
-    public static Result manageAnswerForgotPassword(String input,Matcher matcher) {
-        if(!InfoRegexes.password.isValid(input)) {
+
+    public static Result manageAnswerForgotPassword(String input, Matcher matcher) {
+        if (!InfoRegexes.password.isValid(input)) {
             return new Result(false, "sorry! is not correct!(babol)");
         }
         String username = matcher.group(1);
-        for(User user : App.getUsers()) {
-            if(user.getUsername().equals(username)) {
+        for (User user : App.getUsers()) {
+            if (user.getUsername().equals(username)) {
                 user.setPassword(input);
             }
         }
@@ -83,10 +90,7 @@
     }
 
 
-    public static String manageMakeRandomPassword(int length) {
-        if (length < 8) {
-            throw new IllegalArgumentException("طول رمز عبور باید حداقل ۸ کاراکتر باشد.");
-        }
+    public static String manageMakeRandomPassword(int length, String password) {
         String upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
         String lower = "abcdefghijklmnopqrstuvwxyz";
         String digits = "0123456789";
@@ -94,52 +98,62 @@
         String allChars = upper + lower + digits + symbols;
 
         SecureRandom random = new SecureRandom();
-        List<Character> passwordChars = new ArrayList<>();
+        List<Character> passwordChars = password.chars().mapToObj(c -> (char) c).collect(Collectors.toList());
         passwordChars.add(upper.charAt(random.nextInt(upper.length())));
         passwordChars.add(lower.charAt(random.nextInt(lower.length())));
         passwordChars.add(digits.charAt(random.nextInt(digits.length())));
         passwordChars.add(symbols.charAt(random.nextInt(symbols.length())));
-        for (int i = 4; i < length; i++) {
+        for (int i = password.length() + 4; i < length; i++) {
             passwordChars.add(allChars.charAt(random.nextInt(allChars.length())));
         }
-        Collections.shuffle(passwordChars);
 
-        StringBuilder password = new StringBuilder();
+        StringBuilder tmpPassword = new StringBuilder();
         for (char c : passwordChars) {
-            password.append(c);
+            tmpPassword.append(c);
         }
 
-        return password.toString();
+        return tmpPassword.toString();
     }
 
     public static Result manageLoginUser(Matcher matcher, boolean stayLoggedIn) {
         String username = matcher.group(1);
         String password = matcher.group(2);
-        if(returnUser(username) == null) {
-            return new Result(false,"there is no user found with such name!");
-        } else if(!returnUser(username).getPassword().equals(password)) {
-            return new Result(false,"password is incorrect!");
+
+        User user = returnUser(username);
+        if (user == null) {
+            return new Result(false, "there is no user found with such name!");
         }
-        if(stayLoggedIn) {
-            //TODO
-        } else {
-            App.setCurrentUser(returnUser(username));
+
+        String hashedInputPassword = MakePasswordSHA_256.hashPassword(password, user.getSalt());
+        if (!user.getPassword().equals(hashedInputPassword)) return new Result(false, "incorrect password");
+
+        if (stayLoggedIn) {
+            Gson gson = new Gson();
+            try (Writer writer = new FileWriter("StayLoggedIn.json")) {
+                gson.toJson(user, writer);
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
         }
+        App.setCurrentUser(user);
         return new Result(true, "you have successfully logged in!");
-
     }
+
 
     public static Result manageForgotPassword(Matcher matcher) {
         String username = matcher.group(1);
-        if(returnUser(username) == null) {
-            return new Result(false,"there is no user found with such name!");
+        if (returnUser(username) == null) {
+            return new Result(false, "there is no user found with such name!");
         }
         SecurityQuestion[] questions = SecurityQuestion.values();
-        return new  Result(true, "answer the question!"+"\n"+questions[returnUser(username).getSecurityQuestion()]);
+        return new Result(true, "answer the question!" + "\n" + questions[returnUser(username).getSecurityQuestion()]);
     }
 
-    private static User returnUser(String username) {
-        for (User user : App.getUsers()) {
+    public static User returnUser(String username) {
+        ArrayList<User> users = App.getUsers();
+        if (users == null) return null;
+
+        for (User user : users) {
             if (user.getUsername().equals(username)) {
                 return user;
             }
@@ -147,18 +161,19 @@
         return null;
     }
 
+
     public static Result peakSecurityQuestion(Matcher matcher1, Matcher matcher) {
         Random random = new Random();
         String username = matcher.group(1).trim();
-        String password = matcher.group(2).trim();
+        String password = matcher.group(2);
         String rePassword = matcher.group(3).trim();
         String nickName = matcher.group(4).trim();
         String email = matcher.group(5).trim();
         String gender = matcher.group(6).trim();
         boolean gender1;
-        if(gender.equals("male")){
+        if (gender.equals("male")) {
             gender1 = true;
-        }else {
+        } else {
             gender1 = false;
         }
         int QuestionNumber = Integer.parseInt(matcher1.group(1).trim());
@@ -170,30 +185,27 @@
         } else if (!answer.equals(answerConfirmation)) {
             return new Result(false, "wrong answer confirmation!");
         }
-        User user = new User(username,nickName,password,email,QuestionNumber,answer,gender1);
-        //TODO
-        Gson gson = new Gson();
-        try (FileWriter writer = new FileWriter("Users.json")) {
-            gson.toJson(user, writer);
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-        return new Result(true, "you were Registered!");
+        String salt = MakePasswordSHA_256.generateSalt();
+        String hashPassword = MakePasswordSHA_256.hashPassword(password, salt);
+
+        User user = new User(username, nickName, hashPassword, salt, email, QuestionNumber, answer, gender1);
+        App.addUser(user);
+        return new Result(true, "welcome baby!");
 
     }
 
-    private static String makeRandomUserName(String username) {
+    private static String makeRandomUserName() {
         Random random = new Random();
-        String newUserName = username;
+        String newUserName = "username";
 
         while (returnUser(newUserName) == null) {
 
             boolean randomBoolean = random.nextBoolean();
             if (randomBoolean) {
-                int randomNumber = random.nextInt(1000);  // عددی بین 0 تا 999
-                newUserName = username + randomNumber;
+                int randomNumber = random.nextInt(1000);
+                newUserName = "username" + randomNumber;
             } else {
-                newUserName = username + "-";
+                newUserName = "username" + "-";
             }
         }
         return newUserName;
Index: gradleSetup/src/main/java/model/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport model.Activities.CookFood;\r\nimport model.Activities.CraftTool;\r\nimport model.Activities.Friendship;\r\nimport model.Enums.Items.BackPackType;\r\nimport model.Enums.Items.TrashcanType;\r\nimport model.GameObject.LivingEntity;\r\nimport model.Locations.Building;\r\nimport model.Locations.Farm;\r\nimport model.States.Energy;\r\nimport model.items.Inventory;\r\nimport model.skills.Skill;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Player {\r\n    private ArrayList<Skill> skills = new ArrayList<>();\r\n    private ArrayList<CraftTool> toolRecipes = new ArrayList<>();\r\n    private ArrayList<CookFood> foodRecipes = new ArrayList<>();\r\n    private ArrayList<Building> building = new ArrayList<>();\r\n    private Building defaultHome;\r\n    private ArrayList<LivingEntity> livingEntities =new ArrayList<>();\r\n    private Inventory inventory;\r\n    private Energy energy;\r\n    private BackPackType currentBackpack;\r\n    private TrashcanType currentTrashcan;\r\n    private Inventory playerInventory;\r\n    private Farm playerFarm;\r\n    private ArrayList<Friendship> friendShips =new ArrayList<>();\r\n\r\n\r\n\r\n    public ArrayList<Skill> getSkills() {\r\n        return skills;\r\n    }\r\n\r\n    public void setSkills(ArrayList<Skill> skills) {\r\n        this.skills = skills;\r\n    }\r\n\r\n    public Inventory getInventory() {\r\n        return inventory;\r\n    }\r\n\r\n    public void setInventory(Inventory inventory) {\r\n        this.inventory = inventory;\r\n    }\r\n\r\n    public Energy getEnergy() {\r\n        return energy;\r\n    }\r\n\r\n    public void setEnergy(Energy energy) {\r\n        this.energy = energy;\r\n    }\r\n\r\n    public BackPackType getCurrentBackpack() {\r\n        return currentBackpack;\r\n    }\r\n\r\n    public void setCurrentBackpack(BackPackType currentBackpack) {\r\n        this.currentBackpack = currentBackpack;\r\n    }\r\n\r\n    public TrashcanType getCurrentTrashcan() {\r\n        return currentTrashcan;\r\n    }\r\n\r\n    public void setCurrentTrashcan(TrashcanType currentTrashcan) {\r\n        this.currentTrashcan = currentTrashcan;\r\n    }\r\n\r\n    public Inventory getPlayerInventory() {\r\n        return playerInventory;\r\n    }\r\n\r\n    public void setPlayerInventory(Inventory playerInventory) {\r\n        this.playerInventory = playerInventory;\r\n    }\r\n\r\n    public ArrayList<CraftTool> getToolRecipes() {\r\n        return toolRecipes;\r\n    }\r\n\r\n    public void addToolRecipes(CraftTool toolRecipes) {\r\n        this.toolRecipes.add(toolRecipes);\r\n    }\r\n\r\n    public ArrayList<CookFood> getFoodRecipes() {\r\n        return foodRecipes;\r\n    }\r\n\r\n    public void addFoodRecipes(CookFood foodRecipes) {\r\n        this.foodRecipes.add(foodRecipes);\r\n    }\r\n\r\n\r\n    public ArrayList<LivingEntity> getLivingEntities() {\r\n        return livingEntities;\r\n    }\r\n\r\n    public void addLivingEntities(LivingEntity livingEntities) {\r\n        this.livingEntities.add(livingEntities);\r\n    }\r\n\r\n    public ArrayList<Building> getBuilding() {\r\n        return building;\r\n    }\r\n\r\n    public void addBuilding(Building building) {\r\n        this.building.add(building);\r\n    }\r\n\r\n    public ArrayList<Friendship> getFriendShips() {\r\n        return friendShips;\r\n    }\r\n\r\n    public void addFriendShips(Friendship friendShip) {\r\n        this.friendShips.add(friendShip);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Player.java b/gradleSetup/src/main/java/model/Player.java
--- a/gradleSetup/src/main/java/model/Player.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/Player.java	(date 1746136122680)
@@ -3,32 +3,64 @@
 import model.Activities.CookFood;
 import model.Activities.CraftTool;
 import model.Activities.Friendship;
+import model.Enums.FarmPosition;
 import model.Enums.Items.BackPackType;
 import model.Enums.Items.TrashcanType;
+import model.GameObject.Animal.Animal;
 import model.GameObject.LivingEntity;
 import model.Locations.Building;
 import model.Locations.Farm;
 import model.States.Energy;
 import model.items.Inventory;
-import model.skills.Skill;
+import model.items.Item;
+import model.skills.*;
+import com.google.gson.annotations.Expose;
 
 import java.util.ArrayList;
+import java.util.Objects;
+import java.util.UUID;
 
 public class Player {
+    private String name;
     private ArrayList<Skill> skills = new ArrayList<>();
-    private ArrayList<CraftTool> toolRecipes = new ArrayList<>();
-    private ArrayList<CookFood> foodRecipes = new ArrayList<>();
-    private ArrayList<Building> building = new ArrayList<>();
+    private final ArrayList<CraftTool> toolRecipes = new ArrayList<>();
+    private final ArrayList<CookFood> foodRecipes = new ArrayList<>();
+    private final ArrayList<Building> building = new ArrayList<>();
+    private final ArrayList<Friendship> friendShips =new ArrayList<>();
+    private final ArrayList<Animal> Animals =new ArrayList<>();
+    private final ArrayList<LivingEntity> livingEntities =new ArrayList<>();
     private Building defaultHome;
-    private ArrayList<LivingEntity> livingEntities =new ArrayList<>();
     private Inventory inventory;
+    private Item currentItem;
     private Energy energy;
     private BackPackType currentBackpack;
     private TrashcanType currentTrashcan;
-    private Inventory playerInventory;
+    private boolean fainted;
+    private FarmPosition farmPosition;
+    private String userId;
+    @Expose(serialize = false, deserialize = false)
     private Farm playerFarm;
-    private ArrayList<Friendship> friendShips =new ArrayList<>();
+    @Expose(serialize = false, deserialize = false)
+    private User user;
 
+    public Player(User user) {
+        FarmingSkill farmingSkill = new FarmingSkill(0);
+        ForagingSkill foragingSkill = new ForagingSkill(0);
+        MiningSkill miningSkill = new MiningSkill(0);
+        FishingSkill fishingSkill = new FishingSkill(0);
+        skills.add(farmingSkill);
+        skills.add(foragingSkill);
+        skills.add(miningSkill);
+        skills.add(fishingSkill);
+        energy = new Energy(150);
+        currentBackpack = BackPackType.InitialBackpack;
+        inventory = new Inventory(currentBackpack.getCapacity());
+        currentTrashcan = TrashcanType.initialTrashcan;
+        this.user = user;
+        this.userId = user.getUserId();
+        this.fainted = false;
+        this.currentItem = null;
+    }
 
 
     public ArrayList<Skill> getSkills() {
@@ -71,13 +103,6 @@
         this.currentTrashcan = currentTrashcan;
     }
 
-    public Inventory getPlayerInventory() {
-        return playerInventory;
-    }
-
-    public void setPlayerInventory(Inventory playerInventory) {
-        this.playerInventory = playerInventory;
-    }
 
     public ArrayList<CraftTool> getToolRecipes() {
         return toolRecipes;
@@ -119,4 +144,64 @@
     public void addFriendShips(Friendship friendShip) {
         this.friendShips.add(friendShip);
     }
+
+    public String getUserId() {
+        return userId;
+    }
+
+    public void setUserId(String userId) {
+        this.userId = userId;
+    }
+
+    public Farm getPlayerFarm() {
+        return playerFarm;
+    }
+
+    public void setPlayerFarm(Farm playerFarm) {
+        this.playerFarm = playerFarm;
+    }
+
+    public User getUser() {
+        return user;
+    }
+
+    public void setUser(User user) {
+        this.user = user;
+    }
+
+    public boolean isFainted() {
+        return fainted;
+    }
+
+    public void setFainted(boolean fainted) {
+        this.fainted = fainted;
+    }
+
+    public Item getCurrentItem() {
+        return currentItem;
+    }
+
+    public void setCurrentItem(Item currentItem) {
+        this.currentItem = currentItem;
+    }
+
+    public Building getDefaultHome() {
+        return defaultHome;
+    }
+
+    public void setDefaultHome(Building defaultHome) {
+        this.defaultHome = defaultHome;
+    }
+
+    public ArrayList<Animal> getAnimals() {
+        return Animals;
+    }
+
+    public FarmPosition getFarmPosition() {
+        return farmPosition;
+    }
+
+    public void setFarmPosition(FarmPosition farmPosition) {
+        this.farmPosition = farmPosition;
+    }
 }
\ No newline at end of file
Index: gradleSetup/src/main/java/controller/MenuController/ProfileMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller.MenuController;\r\n\r\nimport controller.CommandController;\r\nimport model.App;\r\nimport model.Enums.InfoRegexes;\r\nimport model.Result;\r\nimport model.User;\r\n\r\npublic class ProfileMenuController extends CommandController {\r\n    public static Result manageChangePassword(String  newPassword,String oldPassword) {\r\n        newPassword= newPassword.trim();\r\n        oldPassword =oldPassword.trim();\r\n        if(!App.getCurrentUser().getPassword().equals(oldPassword)) {\r\n            return new Result(false,\"password ghadimit eshatabahe dadash..\");\r\n        } else if(newPassword.equals(oldPassword)) {\r\n            return new Result(false, \"dadash password jadid hamun ghablie ke\");\r\n        } else if(!InfoRegexes.password.isValid(newPassword)) {\r\n            return new Result(false, \"password jadidet be dard khodet mikore x_x \");\r\n        } else if(!(newPassword.length() <8)) {\r\n            return new Result(false, \"password istoo short\");\r\n        }\r\n        App.getCurrentUser().setPassword(newPassword);\r\n        return new Result(true,\"az in be baad mituni ba password : '\" + newPassword + \"' login koni..(:\");\r\n    }\r\n\r\n    public static Result manageChangeEmail(String newEmail) {\r\n        newEmail= newEmail.trim();\r\n        if(App.getCurrentUser().getEmail().equals(newEmail)) {\r\n            return new Result(false, \"dadash email jadid hamun ghablie ke\");\r\n        } else if(!InfoRegexes.email.isValid(newEmail)) {\r\n            return new Result(false, \"email jadidet be dard khodet mikore x_x \");\r\n        }\r\n        App.getCurrentUser().setEmail(newEmail);\r\n        return new Result(true,\"az in be baad mituni ba email : '\" + newEmail + \"' login koni..(:\");\r\n    }\r\n\r\n    public static Result manageChangeUsername(String newUsername) {\r\n        newUsername= newUsername.trim();\r\n        if(App.getCurrentUser().getUsername().equals(newUsername)) {\r\n            return new Result(false, \"dadash username jadid hamun ghablie ke\");\r\n        } else if(!InfoRegexes.usersName.isValid(newUsername)) {\r\n            return new Result(false, \"username jadidet be dard khodet mikore x_x \");\r\n        }\r\n        App.getCurrentUser().setUsername(newUsername);\r\n        return new Result(true,\"shoma az in be baad jenab : '\" + newUsername + \"' hastid.\");\r\n    }\r\n\r\n    public static Result manageChangeNickName(String newNickName) {\r\n        newNickName= newNickName.trim();\r\n        if(App.getCurrentUser().getName().equals(newNickName)) {\r\n            return new Result(false, \"dadash esm jadid hamun ghablie ke\");\r\n        } else if(!InfoRegexes.nickname.isValid(newNickName)) {\r\n            return new Result(false, \"in che esmie dige dadash?? x_x \");\r\n        }\r\n        App.getCurrentUser().setName(newNickName);\r\n        return new Result(true,\"chaker dash '\" + newNickName + \"'\");\r\n    }\r\n\r\n    public static Result UserInfo() {\r\n        User user = App.getCurrentUser();\r\n        String info = \"Dadash Shoma '\" + user.getUsername() + \"' \" +\r\n                \"Molagahb be '\" + user.getUsername() + \"' Mibashid.\\n\" +\r\n                user.getHighScore() + \"$ balatarin emtiaz shome dar \" +\r\n                user.getNumOfGames() + \"ta bazi mibashad..\";\r\n\r\n        return new Result(true, info);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/controller/MenuController/ProfileMenuController.java b/gradleSetup/src/main/java/controller/MenuController/ProfileMenuController.java
--- a/gradleSetup/src/main/java/controller/MenuController/ProfileMenuController.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/controller/MenuController/ProfileMenuController.java	(date 1746136122673)
@@ -3,6 +3,7 @@
 import controller.CommandController;
 import model.App;
 import model.Enums.InfoRegexes;
+import model.MakePasswordSHA_256;
 import model.Result;
 import model.User;
 
@@ -16,9 +17,14 @@
             return new Result(false, "dadash password jadid hamun ghablie ke");
         } else if(!InfoRegexes.password.isValid(newPassword)) {
             return new Result(false, "password jadidet be dard khodet mikore x_x ");
-        } else if(!(newPassword.length() <8)) {
-            return new Result(false, "password istoo short");
+        } else if(!InfoRegexes.strongPassword.isValid(newPassword)) {
+            return new Result(false, "please only use special character and letter and number for password!");
+        } else if (newPassword.length() < 8 ) {
+            return new Result(false, "password is too short!");
         }
+        String salt = MakePasswordSHA_256.generateSalt();
+        String hashPassword = MakePasswordSHA_256.hashPassword(newPassword, salt);
+        App.getCurrentUser().setSalt(salt);
         App.getCurrentUser().setPassword(newPassword);
         return new Result(true,"az in be baad mituni ba password : '" + newPassword + "' login koni..(:");
     }
@@ -49,8 +55,6 @@
         newNickName= newNickName.trim();
         if(App.getCurrentUser().getName().equals(newNickName)) {
             return new Result(false, "dadash esm jadid hamun ghablie ke");
-        } else if(!InfoRegexes.nickname.isValid(newNickName)) {
-            return new Result(false, "in che esmie dige dadash?? x_x ");
         }
         App.getCurrentUser().setName(newNickName);
         return new Result(true,"chaker dash '" + newNickName + "'");
Index: gradleSetup/src/main/java/model/Slot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\npublic class Slot {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Slot.java b/gradleSetup/src/main/java/model/Slot.java
--- a/gradleSetup/src/main/java/model/Slot.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/Slot.java	(date 1746136122680)
@@ -1,4 +1,34 @@
 package model;
 
+import model.items.Item;
+
 public class Slot {
-}
+    private Item item;
+    private int quantity;
+
+    public Slot(Item item, int quantity) {
+        this.item = item;
+        this.quantity = quantity;
+    }
+
+
+    public Item getItem() {
+        return item;
+    }
+
+    public void setItem(Item item) {
+        this.item = item;
+    }
+
+    public void increaseQuantity(int quantity){
+        this.quantity += quantity;
+    }
+
+    public int getQuantity() {
+        return quantity;
+    }
+
+    public void setQuantity(int quantity) {
+        this.quantity = quantity;
+    }
+}
\ No newline at end of file
Index: gradleSetup/src/main/java/model/App.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\nimport java.util.ArrayList;\r\n\r\nimport model.Enums.Menu;\r\n\r\npublic class App {\r\n    //TODO\r\n    private static ArrayList<User> users = new ArrayList<>();\r\n    private static User currentUser = null;\r\n    private static Menu currentMenu = Menu.loginMenu;\r\n\r\n\r\n\r\n    public static ArrayList<User> getUsers() {\r\n        return users;\r\n    }\r\n\r\n    public static void setUsers(ArrayList<User> users) {\r\n        App.users = users;\r\n    }\r\n\r\n    public static void addUser(User user) {\r\n        users.add(user);\r\n    }\r\n\r\n    public static User getCurrentUser() {\r\n        return currentUser;\r\n    }\r\n\r\n    public static void setCurrentUser(User currentUser) {\r\n        App.currentUser = currentUser;\r\n    }\r\n\r\n    public static Menu getCurrentMenu() {\r\n        return currentMenu;\r\n    }\r\n\r\n    public static void setCurrentMenu(Menu currentMenu) {\r\n        App.currentMenu = currentMenu;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/App.java b/gradleSetup/src/main/java/model/App.java
--- a/gradleSetup/src/main/java/model/App.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/App.java	(date 1746136122674)
@@ -1,26 +1,53 @@
 package model;
+
+import java.io.*;
 import java.util.ArrayList;
 
+
+import com.google.gson.Gson;
+import com.google.gson.reflect.TypeToken;
 import model.Enums.Menu;
 
+
 public class App {
+    private static final String FILE_PATH = "users.json";
     //TODO
     private static ArrayList<User> users = new ArrayList<>();
     private static User currentUser = null;
     private static Menu currentMenu = Menu.loginMenu;
 
 
-
     public static ArrayList<User> getUsers() {
-        return users;
-    }
-
-    public static void setUsers(ArrayList<User> users) {
-        App.users = users;
+        Gson gson = new Gson();
+        ArrayList<User> tmpUsers = new ArrayList<>();
+        try (Reader reader = new FileReader(FILE_PATH)) {
+            tmpUsers = gson.fromJson(reader, new TypeToken<ArrayList<User>>() {
+            }.getType());
+        } catch (FileNotFoundException e) {
+            tmpUsers = new ArrayList<>();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return tmpUsers;
     }
 
     public static void addUser(User user) {
-        users.add(user);
+        Gson gson = new Gson();
+        ArrayList<User> tmpUsers = new ArrayList<>();
+        try (Reader reader = new FileReader(FILE_PATH)) {
+            tmpUsers = gson.fromJson(reader, new TypeToken<ArrayList<User>>() {
+            }.getType());
+        } catch (FileNotFoundException e) {
+            tmpUsers = new ArrayList<>();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        tmpUsers.add(user);
+        try (FileWriter writer = new FileWriter(FILE_PATH)) {
+            gson.toJson(tmpUsers, writer);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
     }
 
     public static User getCurrentUser() {
@@ -39,4 +66,12 @@
         App.currentMenu = currentMenu;
     }
 
-}
+    public static User getUserByUsername(String username) {
+        for(User user : users){
+            if(user.getUsername().equals(username)){
+                return user;
+            }
+        }
+        return null;
+    }
+}
\ No newline at end of file
Index: gradleSetup/src/main/java/controller/GameMenuController/WeatherController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller.GameMenuController;\r\n\r\nimport controller.CommandController;\r\nimport model.Result;\r\n\r\npublic class WeatherController extends CommandController {\r\n    public static Result cheatThor() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result showTodayWeather() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result showTomarrowWeather() {\r\n\r\n        return null;\r\n    }\r\n    //CHEAT\r\n\r\n    public static Result cheatWeather() {\r\n\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/controller/GameMenuController/WeatherController.java b/gradleSetup/src/main/java/controller/GameMenuController/WeatherController.java
--- a/gradleSetup/src/main/java/controller/GameMenuController/WeatherController.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/controller/GameMenuController/WeatherController.java	(date 1746136122672)
@@ -1,27 +1,35 @@
 package controller.GameMenuController;
 
 import controller.CommandController;
+import model.App;
+import model.Enums.WeatherAndTime.WeatherType;
 import model.Result;
 
 public class WeatherController extends CommandController {
-    public static Result cheatThor() {
+    public static Result cheatThor(String x,String y) {
 
         return null;
     }
 
     public static Result showTodayWeather() {
+        WeatherType weatherType = App.getCurrentUser().getCurrentGame().getWeatherState().getTodayWeather();
+        return new Result(true,"weather type: " + weatherType);
+    }
 
-        return null;
+    public static Result showTomorrowWeather() {
+        WeatherType weatherType = App.getCurrentUser().getCurrentGame().getWeatherState().getTomorrowWeather();
+        return new Result(true,"weather type: " + weatherType);
     }
 
-    public static Result showTomarrowWeather() {
-
-        return null;
-    }
-    //CHEAT
-
-    public static Result cheatWeather() {
-
-        return null;
+    public static Result cheatWeather(String weather) {
+        weather = weather.trim();
+        try{
+            WeatherType weatherToSet = WeatherType.valueOf(weather);
+            App.getCurrentUser().getCurrentGame().getWeatherState().setTomorrowWeather(weatherToSet);
+            return new Result(false,"tomorrow weather will be " + weatherToSet);
+        }
+        catch (Exception e){
+            return new Result(false,"Invalid weather type");
+        }
     }
 }
Index: gradleSetup/src/main/java/model/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Map;\r\n\r\npublic class Game {\r\n    private ArrayList<Player> players = new ArrayList<>();\r\n    private Map map;\r\n\r\n    Game(ArrayList<Player> players, Map map) {\r\n        this.players = players;\r\n        this.map = map;\r\n    }\r\n    public ArrayList<Player> getPlayers() {\r\n        return players;\r\n    }\r\n\r\n    public void setPlayers(ArrayList<Player> players) {\r\n        this.players = players;\r\n    }\r\n\r\n    public Map getMap() {\r\n        return map;\r\n    }\r\n\r\n    public void setMap(Map map) {\r\n        this.map = map;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Game.java b/gradleSetup/src/main/java/model/Game.java
--- a/gradleSetup/src/main/java/model/Game.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/Game.java	(date 1746136122678)
@@ -1,15 +1,34 @@
 package model;
 
+import com.google.gson.annotations.Expose;
+import model.States.WeatherState;
+import model.TimeSystem.TimeSystem;
+
 import java.util.ArrayList;
-import java.util.Map;
+import model.Locations.Map;
 
 public class Game {
+    private String gameId;
+    private ArrayList<String> usersId = new ArrayList<>();
     private ArrayList<Player> players = new ArrayList<>();
-    private Map map;
+    private final Map map;
+    private final TimeSystem timeSystem;
+    private final WeatherState weatherState;
+    private String starterPlayerUserId;
+    private String currentPlayerUserId;
+    @Expose(serialize = false, deserialize = false)
+    private Player starterPlayer;
+    @Expose(serialize = false, deserialize = false)
+    private Player currentPlayer;
+    private boolean PendingDelete;
 
-    Game(ArrayList<Player> players, Map map) {
+    public Game(ArrayList<Player> players, Map map, TimeSystem timeSystem, WeatherState weatherState) {
         this.players = players;
         this.map = map;
+        this.timeSystem = timeSystem;
+        this.weatherState = weatherState;
+
+        //TODO HANDLE GAME ID SYSTEM
     }
     public ArrayList<Player> getPlayers() {
         return players;
@@ -23,7 +42,60 @@
         return map;
     }
 
-    public void setMap(Map map) {
-        this.map = map;
+    public TimeSystem getTimeSystem() {
+        return timeSystem;
+    }
+
+    public WeatherState getWeatherState() {
+        return weatherState;
+    }
+
+    public ArrayList<String> getUsersId() {
+        return usersId;
+    }
+
+    public void setUsersId(ArrayList<String> usersId) {
+        this.usersId = usersId;
     }
-}
+
+    public Player getCurrentPlayer() {
+        return currentPlayer;
+    }
+
+    public void setCurrentPlayer(Player currentPlayer) {
+        this.currentPlayer = currentPlayer;
+    }
+
+    public boolean isPendingDelete() {
+        return PendingDelete;
+    }
+
+    public void setPendingDelete(boolean pendingDelete) {
+        PendingDelete = pendingDelete;
+    }
+
+    public String getGameId() {
+        return gameId;
+    }
+
+    public void setGameId(String gameId) {
+        this.gameId = gameId;
+    }
+
+    public Player getPlayerByUser(User user) {
+        for (Player player : players) {
+            if (player.getUser().equals(user)) {
+                return player;
+            }
+        }
+        return null;
+    }
+
+    public Player getStarterPlayer() {
+        return starterPlayer;
+    }
+
+    public void setStarterPlayer(Player starterPlayer) {
+        this.starterPlayer = starterPlayer;
+    }
+}
\ No newline at end of file
Index: gradleSetup/src/main/java/model/Enums/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.Enums;\r\n\r\nimport view.*;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic enum Menu {\r\n    loginMenu(new LoginMenu()),\r\n    mainMenu(new MainMenu()),\r\n    profileMenu(new ProfileMenu()),\r\n    avatarMenu(new AvatarMenu()),\r\n    gameMenu(new GameMenu()),\r\n    exitMenu(new ExitMenu());\r\n\r\n    private final AppMenu menu;\r\n    Menu(AppMenu appMenu) {\r\n        this.menu = appMenu;\r\n    }\r\n    public void checkCommand(Scanner scanner) {\r\n        this.menu.check(scanner);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Enums/Menu.java b/gradleSetup/src/main/java/model/Enums/Menu.java
--- a/gradleSetup/src/main/java/model/Enums/Menu.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/Enums/Menu.java	(date 1746136122675)
@@ -10,8 +10,10 @@
     profileMenu(new ProfileMenu()),
     avatarMenu(new AvatarMenu()),
     gameMenu(new GameMenu()),
+    HouseMenu(new HouseMenu()),
     exitMenu(new ExitMenu());
 
+
     private final AppMenu menu;
     Menu(AppMenu appMenu) {
         this.menu = appMenu;
Index: gradleSetup/src/main/java/controller/GameMenuController/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller.GameMenuController;\r\n\r\nimport controller.CommandController;\r\nimport model.Result;\r\n\r\npublic class GameController extends CommandController {\r\n    public static Result saveGame() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result loadGame() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result exitGame() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result terminateGame() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result manageNextTurn() {\r\n\r\n        return null;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/controller/GameMenuController/GameController.java b/gradleSetup/src/main/java/controller/GameMenuController/GameController.java
--- a/gradleSetup/src/main/java/controller/GameMenuController/GameController.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/controller/GameMenuController/GameController.java	(date 1746136122671)
@@ -1,32 +1,78 @@
 package controller.GameMenuController;
 
 import controller.CommandController;
+import model.App;
+import model.Enums.Menu;
+import model.Game;
+import model.Player;
 import model.Result;
 
+import java.time.DayOfWeek;
+import java.util.Scanner;
+
 public class GameController extends CommandController {
     public static Result saveGame() {
-
-        return null;
-    }
-
-    public static Result loadGame() {
-
+        //TODO save game
         return null;
     }
 
     public static Result exitGame() {
-
-        return null;
+        boolean isPLayerOwner= App.getCurrentUser().getCurrentGame().getStarterPlayer().equals(
+                App.getCurrentUser().getCurrentGame().getCurrentPlayer());
+        System.out.println("Going to exit game...");
+        App.setCurrentMenu(Menu.mainMenu);
+        return saveGame();
     }
 
-    public static Result terminateGame() {
+    public static Result terminateGame(Scanner scanner) {
+        Game game = App.getCurrentUser().getCurrentGame();
+        int startOfCycleIndex = game.getPlayers().indexOf(game.getCurrentPlayer());
+        int playerCount = game.getPlayers().size();
+        for (int i = 1; i < playerCount; i++) {
+            Player playerToVote = game.getPlayers().get(startOfCycleIndex+i % playerCount);
+            System.out.println("Game Is Going to be TERMINATED.\nif you vote Type(DELETE,I KNOW WHAT I'M DOING)"+
+                    "\nType AnyThing else to Cancel The Process..");
+            String input = scanner.nextLine();
+            if(input.equalsIgnoreCase("DELETE,I KNOW WHAT I'M DOING")) {
+                return new Result(false,"Process cancelled by player");
+            }
+        }
 
-        return null;
+        //TODO delete game
+        String ignoringMessage = exitGame().getMessage();
+        for (Player player : game.getPlayers()) {
+            player.getUser().setGameId(null);
+            player.getUser().setCurrentGame(null);
+        }
+        return new Result(true,"Mission Failed Successfully... ):");
     }
 
     public static Result manageNextTurn() {
+        Game game =App.getCurrentUser().getCurrentGame();
+        Player currentPlayer = game.getCurrentPlayer();
+        int indexOfCurrent= game.getPlayers().indexOf(currentPlayer);
 
-        return null;
+        boolean isEndOfCycle = indexOfCurrent+1>=game.getPlayers().size();
+        int indexOfNext = (isEndOfCycle)?0:indexOfCurrent+1;
+        game.setCurrentPlayer(game.getPlayers().get(indexOfNext));
+        //TODO hour ++
+        if(isEndOfCycle){
+            game.getTimeSystem().getDateTime().addHour(1);
+            boolean newDay = game.getTimeSystem().getDateTime().getHour() >= 23;
+            if(newDay){
+                game.getTimeSystem().getDateTime().setHour(9);
+                game.getTimeSystem().getDateTime().addDay(1);
+            }
+            game.getTimeSystem().notifyObservers(newDay);
+        }
+        //TODO add every thing that should be done
+        return new Result(true,currentPlayer.getUser().getName() +" turn ended.. its now turn of :" +
+                game.getCurrentPlayer().getUser().getName() );
+    }
+
+    public Result skipTurn(){
+        System.out.println("Skipping turn...");
+        return manageNextTurn();
     }
 
 }
Index: gradleSetup/src/main/java/controller/GameMenuController/PreGameMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller.GameMenuController;\r\n\r\nimport controller.CommandController;\r\nimport model.Result;\r\n\r\npublic class PreGameMenuController extends CommandController {\r\n    public static Result manageNewGame() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result chooseMap() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result loadGame() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result startGame() {\r\n\r\n        return null;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/controller/GameMenuController/PreGameMenuController.java b/gradleSetup/src/main/java/controller/GameMenuController/PreGameMenuController.java
--- a/gradleSetup/src/main/java/controller/GameMenuController/PreGameMenuController.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/controller/GameMenuController/PreGameMenuController.java	(date 1746136122672)
@@ -1,27 +1,103 @@
 package controller.GameMenuController;
 
 import controller.CommandController;
-import model.Result;
+import model.*;
+import model.Enums.FarmPosition;
+import model.Enums.Menu;
+import model.Locations.Farm;
+import model.Locations.Map;
+import model.Locations.Position;
+import model.States.WeatherState;
+import model.TimeSystem.TimeSystem;
+import model.items.Item;
+
+import java.util.ArrayList;
+import java.util.Scanner;
 
 public class PreGameMenuController extends CommandController {
-    public static Result manageNewGame() {
+    public static Result manageNewGame(String usernamesStr,Scanner scanner) {
+        usernamesStr = usernamesStr.trim();
+        if (usernamesStr.isEmpty()) {
+            return new Result(false, "empty flag");
+        }
+        String[] usernames = usernamesStr.split("\\s+");
+        if (usernames.length > 3) {
+            return new Result(false, "too many players");
+        }
+
+        ArrayList<User> usersToPlay = new ArrayList<>();
+        usersToPlay.add(App.getCurrentUser());
+        for (String username : usernames) {
+            User user = App.getUserByUsername(username);
+            if (user == null) {
+                return new Result(false, "user" + username + " not found");
+            }
+            if(user == App.getCurrentUser()){
+                return new Result(false, "you can not add yourself to game");
+            }
+            usersToPlay.add(user);
+        }
+
+
+        for (User user : usersToPlay) {
+            if(user.getCurrentGame() != null) {
+                return new Result(false, "user" + user.getUsername() + " already in a game");
+            }
+        }
 
-        return null;
-    }
+        ArrayList<Integer> positions = new ArrayList<Integer>();
+        for (User user : usersToPlay) {
+            System.out.print("user: " + user.getUsername() + ". pls choose your farm(1-4):");
+            String input = scanner.nextLine().trim();
+            try{
+                int pos = Integer.parseInt(input);
+                if(pos < 1 || pos > 4) {
+                    return new Result(false,"Please Enter Valid Number");
+                }
+                else if(positions.contains(pos)) {
+                    return new Result(false,"This Farm already occupied");
+                }
+                else {
+                    positions.add(pos);
+                }
+            }
+            catch(NumberFormatException e){
+                System.out.println("invalid farm position");
+            }
+        }
+        //Inputs Are OK
 
-    public static Result chooseMap() {
+        ArrayList<Player> playersToPlay = new ArrayList<>();
+        for (int i = 0; i < usersToPlay.size(); i++) {
+            Player player = new Player(usersToPlay.get(i));
+            playersToPlay.add(player);
+            player.setFarmPosition(FarmPosition.values()[positions.get(i)-1]);
+            //TODO check if it's ok
+        }
 
-        return null;
+        //TODO MakingInitialMap should call chooseMap;
+        Map map = MakeInitialMap(positions);
+        //TODO set default home for each player
+        //TODO SetEachPlayerFarm
+        //TODO give player starter pack
+        TimeSystem timeSystem = new TimeSystem(1,9);
+        WeatherState weatherState = new WeatherState();
+        Game newGame = new Game(playersToPlay,map,timeSystem,weatherState);
+        GivePlayersInitialItem(newGame);
+        App.getCurrentUser().setCurrentGame(newGame);
+        App.getCurrentUser().setGameId(newGame.getGameId());
+        App.getCurrentUser().setNumOfGames(App.getCurrentUser().getNumOfGames()+1);
+        App.getCurrentUser().getAllGamesId().add(newGame.getGameId());
+        newGame.setCurrentPlayer(newGame.getPlayerByUser(App.getCurrentUser()));
+        newGame.setStarterPlayer(newGame.getPlayerByUser(App.getCurrentUser()));
+        return new Result(true, "successfully added game with id:" + newGame.getGameId());
     }
 
     public static Result loadGame() {
-
-        return null;
-    }
-
-    public static Result startGame() {
-
-        return null;
+        String gameId = App.getCurrentUser().getGameId();
+        Game gameToLoad= somthing .... ;
+        //TODO
+        gameToLoad.setStarterPlayer(gameToLoad.getPlayerByUser(App.getCurrentUser()));
     }
 
 
Index: gradleSetup/src/main/java/controller/GameMenuController/CookingController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller.GameMenuController;\r\n\r\nimport controller.CommandController;\r\nimport model.Result;\r\n\r\npublic class CookingController extends CommandController {\r\n    public static Result refrigerator() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result showRecipes() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result prepareCooking() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result eatFood() {\r\n\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/controller/GameMenuController/CookingController.java b/gradleSetup/src/main/java/controller/GameMenuController/CookingController.java
--- a/gradleSetup/src/main/java/controller/GameMenuController/CookingController.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/controller/GameMenuController/CookingController.java	(date 1746136122671)
@@ -1,26 +1,189 @@
 package controller.GameMenuController;
 
 import controller.CommandController;
+import model.Activities.CookFood;
+import model.App;
 import model.Result;
+import model.Slot;
+import model.States.Energy;
+import model.items.Food;
+import model.items.Item;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.regex.Matcher;
 
 public class CookingController extends CommandController {
-    public static Result refrigerator() {
+    public static Result refrigeratorPick(Matcher matcher) {
+        String input = matcher.group(1).trim();
+        Item item = returnRefrigeratorItemByName(input);
+        if (item == null) {
+            return new Result(false, "there is no " + item.getName() + " in refrigerator");
+        }
+        App.getCurrentUser()
+                .getCurrentGame()
+                .getCurrentPlayer()
+                .getPlayerFarm().getMyHome()
+                .getMyRefrigerator()
+                .getInventory()
+                .remove(item, 1);
+        App.getCurrentUser()
+                .getCurrentGame()
+                .getCurrentPlayer()
+                .getInventory()
+                .add(item, 1);
+        return new Result(true, "you get Food!");
+    }
 
-        return null;
+    public static Result refrigeratorPut(Matcher matcher) {
+        String input = matcher.group(1).trim();
+        Item item = returnInventoryItemByName(input);
+        if (item == null) {
+            return new Result(false, "there is no " + item.getName() + " in refrigerator");
+        } else if (!(item instanceof Food)) {
+            return new Result(false, "this item is not Food!");
+        }
+        App.getCurrentUser()
+                .getCurrentGame()
+                .getCurrentPlayer()
+                .getPlayerFarm()
+                .getMyHome()
+                .getMyRefrigerator()
+                .getInventory()
+                .add(item, 1);
+        App.getCurrentUser()
+                .getCurrentGame()
+                .getCurrentPlayer()
+                .getInventory()
+                .remove(item, 1);
+        return new Result(true, "you put Food!");
     }
 
     public static Result showRecipes() {
+        StringBuilder tmpString = new StringBuilder();
+        for (CookFood cookFood : App.
+                getCurrentUser()
+                .getCurrentGame()
+                .getCurrentPlayer()
+                .getFoodRecipes()) {
+            tmpString.append("foodName : ").append(cookFood.getName()).append("\n").append("Ingredients : ").append(cookFood.getIngredients());
+            tmpString.append("-----------------------------------------");
+        }
+        return new Result(true, tmpString.toString());
+    }
+
+    public static Result prepareCooking(Matcher matcher) {
+        String recipeName = matcher.group(1).trim();
+        CookFood cookFood = returnCookFoodByName(recipeName);
+        if (cookFood == null) {
+            return new Result(false, "you are not allowed to use this recipe");
+        }
+        for (Slot slot : App.getCurrentUser()
+                .getCurrentGame()
+                .getCurrentPlayer()
+                .getInventory()
+                .getSlots()) {
+            Item item = slot.getItem();
+            int amount = slot.getQuantity();
+            boolean exist = false;
+            for (Item item1 : cookFood.getIngredients().keySet()) {
+                int amount1 = cookFood.getIngredients().get(item1);
+                if (amount1 > amount) {
+                    return new Result(false, "you dont have enough ingredients ->>> " + item1.getName() + " about " + (amount1 - amount));
+                }
+                if (item1.getName().equals(item.getName())) {
+                    exist = true;
+                }
+            }
+            if (!exist) {
+                return new Result(false, "you don't hava all the materials.");
+            }
+        }
+        App.getCurrentUser().
+                getCurrentGame()
+                .getCurrentPlayer()
+                .setEnergy(new Energy(App.getCurrentUser()
+                .getCurrentGame()
+                .getCurrentPlayer()
+                .getEnergy()
+                .getEnergy() - 3));
+        for (Item item : cookFood.getIngredients().keySet()) {
+            int quantity = cookFood.getIngredients().get(item);
+            App.getCurrentUser()
+                    .getCurrentGame()
+                    .getCurrentPlayer()
+                    .getInventory()
+                    .remove(item, quantity);
+        }
+        Food food = new Food(cookFood.getName(), 20, cookFood.getEnergy(), cookFood.getPrice(),cookFood.getBuff());
+        App.getCurrentUser().getCurrentGame().getCurrentPlayer().getInventory().add(food, 1);
+        return new Result(true, "");
+    }
+
+    public static Result eatFood(Matcher matcher) {
+        String foodName = matcher.group(1).trim();
+        Item item = returnInventoryItemByName(foodName);
+        if (item == null) {
+            return new Result(false, "there is no `" + item.getName() + " in your inventory!");
+        }else if (!(item instanceof Food)) {
+            return new Result(false, "this item is not Food!");
+        }
+        Food food = (Food) item;
+        App.getCurrentUser().getCurrentGame().getCurrentPlayer().getInventory().remove(item, 1);
+        App.getCurrentUser()
+                .getCurrentGame()
+                .getCurrentPlayer()
+                .setEnergy(new Energy(App.getCurrentUser()
+                        .getCurrentGame()
+                        .getCurrentPlayer()
+                        .getEnergy()
+                        .getEnergy()+food.getEnergy()));
+        if(food.getBuff().equals("1")){}
+
+        return new Result(true, "you eat "+item.getName());
+    }
 
+    private static Item returnRefrigeratorItemByName(String itemName) {
+
+        for (Slot slot : App.getCurrentUser()
+                .getCurrentGame()
+                .getCurrentPlayer()
+                .getPlayerFarm()
+                .getMyHome()
+                .getMyRefrigerator()
+                .getInventory()
+                .getSlots()) {
+            Item item = slot.getItem();
+            if (item.getName().equals(itemName)) {
+                return item;
+            }
+        }
         return null;
     }
 
-    public static Result prepareCooking() {
-
+    private static Item returnInventoryItemByName(String itemName) {
+        for (Slot slot : App.getCurrentUser()
+                .getCurrentGame()
+                .getCurrentPlayer()
+                .getInventory()
+                .getSlots()) {
+            Item item = slot.getItem();
+            if (item.getName().equals(itemName)) {
+                return item;
+            }
+        }
         return null;
     }
 
-    public static Result eatFood() {
-
+    private static CookFood returnCookFoodByName(String itemName) {
+        for (CookFood cookFood : App.getCurrentUser()
+                .getCurrentGame()
+                .getCurrentPlayer()
+                .getFoodRecipes()) {
+            if (cookFood.getName().equals(itemName)) {
+                return cookFood;
+            }
+        }
         return null;
     }
 }
Index: gradleSetup/src/main/java/model/Enums/InfoRegexes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model.Enums;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic enum InfoRegexes {\r\n    email(\"\"),\r\n    nickname(\"\"),\r\n    password(\"\"),\r\n    usersName(\"\"),\r\n    gender(\"\"),\r\n    answer(\"\");\r\n\r\n    private final String pattern;\r\n\r\n    InfoRegexes(String pattern) {\r\n        this.pattern = pattern;\r\n    }\r\n\r\n    public boolean isValid(String input) {\r\n        return java.util.regex.Pattern.matches(this.pattern, input);\r\n    }\r\n\r\n    public Matcher getMatcher(String input) {\r\n        Pattern compiledPattern = java.util.regex.Pattern.compile(this.pattern);\r\n        return compiledPattern.matcher(input);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/model/Enums/InfoRegexes.java b/gradleSetup/src/main/java/model/Enums/InfoRegexes.java
--- a/gradleSetup/src/main/java/model/Enums/InfoRegexes.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/model/Enums/InfoRegexes.java	(date 1746136122674)
@@ -4,12 +4,10 @@
 import java.util.regex.Pattern;
 
 public enum InfoRegexes {
-    email(""),
-    nickname(""),
-    password(""),
-    usersName(""),
-    gender(""),
-    answer("");
+    email("(?!.*\\.\\.)[A-Za-z0-9._-]+@[A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)*\\.[A-Za-z]{2,}"),
+    password("[A-Za-z0-9?><,\"';:\\\\/|\\]\\[}{+=)(*&^%$#!]*"),
+    strongPassword("(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[?><,\"';:\\\\/|\\]\\[\\}\\{\\+=\\)\\(\\*&\\^%\\$#!])[a-zA-Z\\d?><,\"';:\\\\/|\\]\\[\\}\\{\\+=\\)\\(\\*&\\^%\\$#!]{1,}"),
+    usersName("[a-zA-Z0-9-]+");
 
     private final String pattern;
 
Index: gradleSetup/src/main/java/controller/GameMenuController/TimeAndDateController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller.GameMenuController;\r\n\r\nimport controller.CommandController;\r\nimport model.Result;\r\n\r\npublic class TimeAndDateController extends CommandController {\r\n    public static Result manageShowTime() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result manageShowDate() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result manageShowDateAndTime() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result dayOfTheWeek() {\r\n\r\n        return null;\r\n    }\r\n    public static Result showCurrentSeason() {\r\n\r\n        return null;\r\n    }\r\n\r\n    //CHEAT\r\n\r\n    public static Result cheatAdvanceTime() {\r\n\r\n        return null;\r\n    }\r\n\r\n    public static Result cheatAdvanceDate() {\r\n\r\n        return null;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradleSetup/src/main/java/controller/GameMenuController/TimeAndDateController.java b/gradleSetup/src/main/java/controller/GameMenuController/TimeAndDateController.java
--- a/gradleSetup/src/main/java/controller/GameMenuController/TimeAndDateController.java	(revision 80348e89401892ac623a8409ba910183fada6c06)
+++ b/gradleSetup/src/main/java/controller/GameMenuController/TimeAndDateController.java	(date 1746136122672)
@@ -1,43 +1,61 @@
 package controller.GameMenuController;
 
 import controller.CommandController;
+import model.App;
+import model.Enums.WeatherAndTime.DayOfWeek;
+import model.Enums.WeatherAndTime.Seasons;
 import model.Result;
 
 public class TimeAndDateController extends CommandController {
     public static Result manageShowTime() {
-
-        return null;
+        int hour = App.getCurrentUser().getCurrentGame().getTimeSystem().getDateTime().getHour();
+        String hour24 = (hour > 12) ? String.format("%02d", hour)+"PM":  String.format("%02d", hour)+"AM";
+        return new Result(true,"Current Hour:" + hour24);
     }
 
     public static Result manageShowDate() {
-
-        return null;
+        int day = App.getCurrentUser().getCurrentGame().getTimeSystem().getDateTime().getDay();
+        return new Result(true,"Emshow showhe " + day + " om mibashad");
     }
 
     public static Result manageShowDateAndTime() {
-
-        return null;
+        int hour = App.getCurrentUser().getCurrentGame().getTimeSystem().getDateTime().getHour();
+        String hour24 = (hour > 12) ? String.format("%02d", hour)+"PM":  String.format("%02d", hour)+"AM";
+        int day = App.getCurrentUser().getCurrentGame().getTimeSystem().getDateTime().getDay();
+        return new Result(true, "Day: " + day + "\nHour: " + hour24 );
     }
 
     public static Result dayOfTheWeek() {
-
-        return null;
+        DayOfWeek dow = App.getCurrentUser().getCurrentGame().getTimeSystem().getDateTime().getDayOfWeek();
+        return new Result(true,"Day Of Week = " + dow);
     }
     public static Result showCurrentSeason() {
-
-        return null;
+        Seasons season = App.getCurrentUser().getCurrentGame().getTimeSystem().getDateTime().getSeason();
+        return new Result(true,"Day Of Week = " + season);
     }
 
     //CHEAT
 
-    public static Result cheatAdvanceTime() {
-
-        return null;
+    public static Result cheatAdvanceTime(String newTime) {
+        newTime = newTime.trim();
+        try{
+            int newHour = Integer.parseInt(newTime);
+            App.getCurrentUser().getCurrentGame().getTimeSystem().getDateTime().setHour(newHour);
+            return new Result(true,"Time successfully changed to " + newTime);
+        }catch(NumberFormatException e){
+            return new Result(true,"Invalid time format");
+        }
     }
-
-    public static Result cheatAdvanceDate() {
 
-        return null;
+    public static Result cheatAdvanceDate(String newDate) {
+        newDate = newDate.trim();
+        try{
+            int newDay = Integer.parseInt(newDate);
+            App.getCurrentUser().getCurrentGame().getTimeSystem().getDateTime().setDay(newDay);
+            return new Result(true,"Date successfully changed to " + newDate);
+        }catch(NumberFormatException e){
+            return new Result(true,"Invalid time format");
+        }
     }
 
 
